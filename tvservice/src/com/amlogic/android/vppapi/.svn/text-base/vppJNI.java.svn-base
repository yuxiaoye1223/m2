package com.amlogic.android.vppapi;

import com.amlogic.android.afeapi.afeJNI.AdcGainOffset;
import com.amlogic.android.eepromapi.eepromJNI;
import com.amlogic.android.eepromapi.eepromJNI.*;
import com.amlogic.android.osdapi.osdJNI;
import com.amlogic.android.vdinapi.vdinJNI;
import com.amlogic.android.vdinapi.vdinJNI.*;

import android.R.integer;
import android.os.IPowerManager;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.util.Log;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

class VppParam {
	int brightness = 0;
	int contrast = 0;
	int color = 0;
	int hue = 0;
	int sharpness = 0;
	int colorTemp = 0;
	int noiseRd = 0;
	int picMode = 0;
	int aspectRat = 0;

	public VppParam GetPicModeData(vdinJNI.SrcType srcType, int picMode) {
		VppParam modeCfg = new VppParam();

		modeCfg.brightness = 50;
		modeCfg.contrast = 50;
		modeCfg.sharpness = 50;
		modeCfg.noiseRd = 0;
		modeCfg.color = 50;
		modeCfg.hue = 50;

		/** tune these value according to customer's requirement **/
		if (picMode == vppJNI.PictureMode.STANDARD.ordinal()) {
			if (srcType == vdinJNI.SrcType.AV) {
				modeCfg.brightness = 50;
				modeCfg.contrast = 50;
				modeCfg.sharpness = 50;
				modeCfg.noiseRd = 0;
				modeCfg.color = 50;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.COMPONENT) {
				modeCfg.brightness = 50;
				modeCfg.contrast = 50;
				modeCfg.sharpness = 50;
				modeCfg.noiseRd = 0;
				modeCfg.color = 50;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.VGA) {
				modeCfg.brightness = 50;
				modeCfg.contrast = 50;
				modeCfg.sharpness = 0;
				modeCfg.noiseRd = 0;
				modeCfg.color = 50;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.HDMI) {
				modeCfg.brightness = 50;
				modeCfg.contrast = 50;
				modeCfg.sharpness = 50;
				modeCfg.noiseRd = 0;
				modeCfg.color = 50;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.MPEG) {
				modeCfg.brightness = 50;
				modeCfg.contrast = 50;
				modeCfg.sharpness = 50;
				modeCfg.noiseRd = 0;
				modeCfg.color = 50;
//				modeCfg.hue = 50;
			}

		} else if (picMode == vppJNI.PictureMode.VIVID.ordinal()) {
			if (srcType == vdinJNI.SrcType.AV) {
				modeCfg.brightness = 55;
				modeCfg.contrast = 60;
				modeCfg.sharpness = 60;
				modeCfg.noiseRd = 1;
				modeCfg.color = 55;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.COMPONENT) {
				modeCfg.brightness = 55;
				modeCfg.contrast = 60;
				modeCfg.sharpness = 60;
				modeCfg.noiseRd = 1;
				modeCfg.color = 55;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.VGA) {
				modeCfg.brightness = 55;
				modeCfg.contrast = 60;
				modeCfg.sharpness = 0;
				modeCfg.noiseRd = 0;
				modeCfg.color = 55;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.HDMI) {
				modeCfg.brightness = 55;
				modeCfg.contrast = 60;
				modeCfg.sharpness = 60;
				modeCfg.noiseRd = 0;
				modeCfg.color = 55;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.MPEG) {
				modeCfg.brightness = 55;
				modeCfg.contrast = 60;
				modeCfg.sharpness = 60;
				modeCfg.noiseRd = 0;
				modeCfg.color = 55;
//				modeCfg.hue = 50;
			}
		} else if (picMode == vppJNI.PictureMode.SOFT.ordinal()) {
			if (srcType == vdinJNI.SrcType.AV) {
				modeCfg.brightness = 45;
				modeCfg.contrast = 40;
				modeCfg.sharpness = 40;
				modeCfg.noiseRd = 1;
				modeCfg.color = 45;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.COMPONENT) {
				modeCfg.brightness = 45;
				modeCfg.contrast = 40;
				modeCfg.sharpness = 40;
				modeCfg.noiseRd = 1;
				modeCfg.color = 45;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.VGA) {
				modeCfg.brightness = 45;
				modeCfg.contrast = 40;
				modeCfg.sharpness = 0;
				modeCfg.noiseRd = 0;
				modeCfg.color = 45;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.HDMI) {
				modeCfg.brightness = 45;
				modeCfg.contrast = 40;
				modeCfg.sharpness = 40;
				modeCfg.noiseRd = 1;
				modeCfg.color = 45;
//				modeCfg.hue = 50;
			} else if (srcType == vdinJNI.SrcType.MPEG) {
				modeCfg.brightness = 45;
				modeCfg.contrast = 40;
				modeCfg.sharpness = 40;
				modeCfg.noiseRd = 1;
				modeCfg.color = 45;
//				modeCfg.hue = 50;
			}
		}
		return modeCfg;
	}

	public void SetSrcVppParam(int inputSrcType, VppParam srcVppParam) {
		this.brightness = srcVppParam.brightness;
		this.contrast = srcVppParam.contrast;
		this.color = srcVppParam.color;
		this.hue = srcVppParam.hue;
		this.sharpness = srcVppParam.sharpness;
		this.colorTemp = srcVppParam.colorTemp;
		this.noiseRd = srcVppParam.noiseRd;
		this.picMode = srcVppParam.picMode;
		this.aspectRat = srcVppParam.aspectRat;
	}

	public VppParam GetSrcVppParam(int inputSrcType) {
		VppParam rtParam = new VppParam();

		rtParam.brightness = this.brightness;
		rtParam.contrast = this.contrast;
		rtParam.color = this.color;
		rtParam.hue = this.hue;
		rtParam.sharpness = this.sharpness;
		rtParam.colorTemp = this.colorTemp;
		rtParam.noiseRd = this.noiseRd;
		rtParam.picMode = this.picMode;
		rtParam.aspectRat = this.aspectRat;
		return rtParam;
	}
}

public class vppJNI {
	private final static String DBTAG = "VPP_JNI";
	static boolean IsVppOpened = false;
	static boolean IsBaseColorDemo = false;
	static int oldBLVal = -1;

/************************************************************************
 * 
 * 			LG42E83
 * 
 ***********************************************************************/
    /***************************************************************
     * 			for AV
     **************************************************************/
    public static final int[] LG42E83_AV_BRIGHTNESS_TABLE = {
        -1024, -996, -968, -941, -914, -886, -858, -831, -804, -777, -750,
        -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, -569, -553,
        -537, -521, -505, -489, -473, -457, -441, -425, -408, -390, -373, -355,
        -338, -320, -303, -285, -268, -250, -225, -200, -175, -150, -125, -100,
        -75, -50, -25, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 86, 92, 99,
        105, 112, 118, 124, 131, 137, 144, 148, 153, 158, 163, 168, 172, 177,
        182, 187, 192, 195, 198, 201, 205, 208, 211, 215, 218, 221, 225, 229,
        233, 237, 242, 246, 250, 255, 259, 263, 268
    };
    
    public static final int[] LG42E83_AV_CONTRAST_TABLE = {
        -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
        -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
        -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
        -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
        -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
        224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
        336, 344, 352, 360, 368, 376, 384, 392, 400
    };

    public static final int[] LG42E83_AV_COLOR_TABLE = {       
        -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
         -81,   -76,   -71,   -66,   -64,   -61,   -58,   -56,   -53,   -51,    //20
         -48,   -46,   -43,   -40,   -38,   -35,   -33,   -33,   -28,   -25,    //30
         -23,   -20,   -17,   -15,   -12,   -10,   -7,   -5,   -2,   0,    //40
        3, 8, 13, 18, 23, 28, 32, 36, 40, 43, // 50
        44, 45, 46, 47, 48, 49, 50, 51, 52, 53, // 60
        54, 56, 58, 61, 64, 66, 69, 71, 74, 76, // 70
         79, 81,   84,   87,   89,   92,   94,   97,   99,   102,    //80
         104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
        117, 117, 120, 120, 122, 122, 125, 125, 127, 127
    // 100
	};

    public static final int[] LG42E83_AV_HUE_TBL = {
     -25, -24, -24, -23, -23, -22, -22, -21, -21, -20, -20, // 10
	        -19,  -19,  -18,  -18,  -17,  -17,  -16, -16, -15, -15,    //20
	        -14,  -14,  -13,  -13,  -12,  -12,  -11, -11, -10, -10,    //30
	        -9,  -9,  -8,  -8,  -7,  -7,   -6,  -6,  -5,   -5,    //40
	          -4,    -4,   -3,   -3,   -2,   -2,   -1,  -1,  0,  0, // 50
	         1,   1,   2,   2,   3,   3,   4,  4,  5,  5, // 60
	         6,   6,   7,   7,   8,   8,   9,  9,  10,  10, // 70
	         11,   11,   12,   12,   13,   13,   14,  14,  15,  15,    //80
	        16,  16,  17,  17,  18,  18,  19, 19, 20,  20,    //90
	        21,  21,  22,  22,  23,  23,  24, 24, 25, 25
    };
    
    public static final int[] LG42E83_AV_SHARPNESS_TABLE = {
	     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
    // 100
	};

    /***************************************************************
     * 			for YPbPR
     **************************************************************/
    public static final int[] LG42E83_COMPONENT_BRIGHTNESS_TABLE = {
        -1024, -996, -968, -941, -914, -886, -858, -831, -804, -777, -750,
           -734, -717, -701, -684, -668, -651, -635, -618, -602, -585,
           -569, -553, -537, -521, -505, -489, -473, -457, -441, -425,
           -408, -390, -373, -355, -338, -320, -303, -285, -268, -250,
           -225, -200, -175, -150, -125, -100,  -75,  -50,  -37,  -25, 
             -5,   10,   20,   30,   40,   48,   56,   64,   72,   80,
              86,  92,   99,  105,  112,  118,  124,  131,  137,  144,
            148,  153,  158,  163,  168,  172,  177,  182,  187,  192,
            195,  198,  201,  205,  208,  211,  215,  218,   221, 225, 
            229,  233,  237,  242,  246,  250,  255,  259,   263, 268
  };

    public static final int[] LG42E83_COMPONENT_CONTRAST_TABLE = {
        -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
        -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
        -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
        -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
        -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
        224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
        336, 344, 352, 360, 368, 376, 384, 392, 400
};

    public static final int[] LG42E83_COMPONENT_COLOR_TABLE = {
        -128, -122, -112, -112, -107, -102, -97, -94, -87, -81, -76, // 10
            -71,   -66,   -61,   -58,   -56,   -53,   -40,   -35,   -33,   -25,    //20
            -20,   -15,   -10,   -5,   0,   5,   7,   15,   20,   25,    //30
        28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
        53, 56, 58, 61, 64, 66, 69, 71, 74, 76, // 50
        79, 81, 84, 87, 89, 92, 92, 94, 94, 97, // 60
        97, 97, 99, 99, 99, 102, 102, 102, 104, 104, // 70
        91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
        112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
        120, 120, 120, 120, 120, 120, 120, 127, 127, 127
    // 100
	};

    public static final int[] LG42E83_COMPONENT_SHARPNESS_TABLE = {
     0,  2,  4,  6,  8, 10, 12, 14, 16, 18,  20,    //10
			22, 24, 26, 28, 30, 32, 34, 36, 38, 40, // 20
			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 30
			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 40
        62, 64, 66, 68, 70, 73, 76, 78, 80, 82, // 50
        83, 84, 84, 85, 86, 86, 87, 87, 88, 88, // 60
        89, 89, 89, 90, 90, 90, 91, 91, 91, 92, // 70
        92, 92, 92, 93, 93, 93, 93, 94, 94, 94, // 80
        94, 95, 95, 95, 95, 96, 96, 96, 97, 97, // 90
        97, 97, 98, 98, 98, 98, 99, 99, 99, 100
    // 100
 
	};

    /***************************************************************
     * 			for VGA 
     **************************************************************/
    public static final int[] LG42E83_VGA_BRIGHTNESS_TABLE = {
        -1024, -996, -968, -941, -914, -886, -858, -831, -804, -777, -750,
        -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, -569, -553,
        -537, -521, -505, -489, -473, -457, -441, -425, -408, -390, -373, -355,
        -338, -320, -303, -285, -268, -250, -225, -200, -175, -150, -125, -100,
        -75, -50, -25, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 86, 92, 99,
        105, 112, 118, 124, 131, 137, 144, 148, 153, 158, 163, 168, 172, 177,
        182, 187, 192, 195, 198, 201, 205, 208, 211, 215, 218, 221, 225, 229,
        233, 237, 242, 246, 250, 255, 259, 263, 268
    };
   
    public static final int[] LG42E83_VGA_CONTRAST_TABLE = {
        -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
        -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
        -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
        -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
        -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
        224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
        336, 344, 352, 360, 368, 376, 384, 392, 400
    };

    public static final int[] LG42E83_VGA_COLOR_TABLE = {
        -128, -122, -112, -112, -107, -102, -97, -94, -87, -81, -76, // 10
		-71, -66, -61, -58, -56, -53, -40, -35, -33, -25, // 20
		-20, -15, -10, -5, 0, 5, 7, 15, 20, 25, // 30
		28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
		53, 56, 58, 61, 64, 66, 69, 71, 74, 76, // 50
		79, 81, 84, 87, 89, 92, 92, 94, 94, 97, // 60
		97, 97, 99, 99, 99, 102, 102, 102, 104, 104, // 70
		91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
		112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
        120, 120, 120, 120, 120, 120, 120, 127, 127, 127
    // 100
	};

    public static final int[] LG42E83_VGA_SHARPNESS_TABLE = {
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
    // 100
  
	};

    /***************************************************************
     * 			for HDMI 
     **************************************************************/
    public static final int[] LG42E83_HDMI_BRIGHTNESS_TABLE = {
   	-1024,  -996,-968,-941,-914,-886,-858,-831,-804,-777,-750,
            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, 
            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, 
            -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, 
            -225, -200, -175, -150, -125, -100,  -75,  -50,  -25,    0, 
               5,   10,   15,   20,   25,   30,   35,   40,   45,   50, 
              55,   60,   65,   70,   75,   80,   85,   90,   95,  100,
             105,  110,  115,  120,  125,  130,  135,  140,   145, 150,
             153,  156,  159,  162,  165,  168,  171,  174,   177, 180,
             182,  184,  186,  188,  190,  192,  194,  196,   198, 200
    };

    public static final int[] LG42E83_HDMI_CONTRAST_TABLE = {
	 -1024,-1019,-1013,-1008,-1002,-997,-991,-985,-980,-974,-968,
        -952, -935, -918, -901, -885, -868, -851, -834, -817, -800, -772, -743,
        -714, -685, -657, -628, -599, -570, -541, -512, -481, -450, -419, -388,
        -356, -325, -294, -263, -232, -200, -180, -160, -140, -120, -100, -80,
        -60, -40, -20, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
        224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
        336, 344, 352, 360, 368, 376, 384, 392, 400
	};

    public static final int[] LG42E83_HDMI_COLOR_TABLE = {
        -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
         -81,   -76,   -71,   -66,   -64,   -61,   -58,   -56,   -53,   -51,    //20
         -48,   -46,   -43,   -40,   -38,   -35,   -33,   -33,   -28,   -25,    //30
         -23,   -20,   -17,   -15,   -12,   -10,   -7,   -5,   -2,   0,    //40
        2, 6, 10, 13, 17, 20, 23, 27, 30, 39, // 50
        40, 41, 42, 43, 44, 45, 47, 49, 50, 51, // 60
         53,   56,   58,   61,   64,   66,   69,   71,   74,   76,    //70
         79, 81,   84,   87,   89,   92,   94,   97,   99,   102,    //80
         104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
        117, 117, 120, 120, 122, 122, 125, 125, 127, 127
    // 100
 };
    
    public static final int[] LG42E83_HDMI_SHARPNESS_TABLE = {
        0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, // 10
        6, 6, 7, 7, 8, 8, 9, 9, 10, 10, // 20
        11, 11, 12, 12, 13, 13, 14, 14, 15, 15, // 30
        16, 16, 16, 17, 17, 18, 18, 19, 19, 20, // 40
        20, 21, 21, 22, 22, 23, 23, 24, 25, 26, // 50
        28, 30, 32, 34, 36, 38, 40, 42, 44, 46, // 60
        47, 48, 49, 50, 51, 52, 53, 54, 55, 56, // 70
			57, 58, 59, 60, 61, 62, 63, 64, 65, 66, // 80
			67, 68, 69, 70, 71, 72, 74, 76, 78, 80, // 90
        82, 84, 86, 88, 90, 92, 94, 96, 98, 100
    // 100
	};

    /***************************************************************
     * 			for VideoPlayer 
     **************************************************************/
    public static final int[] LG42E83_MPEG_BRIGHTNESS_TABLE = {
       	-1024,  -996,-968,-941,-914,-886,-858,-831,-804,-777,-750,  //10
                -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, //20
                -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, //30
                -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, //40
                -235, -220, -205, -190, -175, -160,  -145,  -130,  -115, -100, //50
                   -85,   -70,   -55,   -40,   -25,   -10,   5,   20,   35,   50, //60
                  55,   60,   65,   70,   75,   80,   85,   90,   95,  100, //70
                 105,  110,  115,  120,  125,  130,  135,  140,   145, 150, //80
                 153,  156,  159,  162,  165,  168,  171,  174,   177, 180, //90
                 182,  184,  186,  188,  190,  192,  194,  196,   198, 200  //100
        };

        public static final int[] LG42E83_MPEG_CONTRAST_TABLE = {
    	 -1024,-1019,-1013,-1008,-1002,-997,-991,-985,-980,-974,-968,  //10
                -952, -935, -918, -901,-885,-868,-851,-834,-817,-800,  //20
                -772,-743,  -714, -685,-657,-628,-599,-570,-541,-512,  //30
                -481, -450, -419, -388,-356,-325,-294,-263,-232,-200,  //40
                -170, -140, -110,  -80, -50, -20,  10,  40,  70, 100,  //50
                 103,  106,  109,  112, 115, 118, 121, 124, 127, 130,  //60
                 133,  136,  139, 142,  145, 148, 151, 154, 157, 160,  //70
                  168, 176,  184,  192,  200,208, 216, 224, 232, 240,  //80 
                  248, 256,  264,  272,  280,288, 296, 304, 312, 320,  //90
                  328, 336,  344,  352,  360,368, 376, 384, 392, 400   //100
    	};

        public static final int[] LG42E83_MPEG_COLOR_TABLE = {
      -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
             -81,  -76,  -71,  -66,  -64,  -61,  -58,  -56, -53, -51,    //20
             -48,  -46,  -43,  -40,  -38,  -35,  -33,  -33, -28, -25,    //30
             -23,  -20,  -17,  -15,  -12,  -10,   -7,   -5,  -2,   0,    //40
               8,   16,   24,   32,   40,   48,   56,   64,  72,  80,   // 50
              81,   82,   83,   84,   85,   86,   87,   88,   89, 90, // 60
              91,   92,   92,   93,   93,   94,   94,   95,   95, 96,    //70
              97,   98,   98,   99,   99,   100, 100,  101,  101,102,    //80
             104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
            117, 117, 120, 120, 122, 122, 125, 125, 127, 127        // 100
     };
        
//        public static final int[] LG42E83_MPEG_SHARPNESS_TABLE = {
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 30
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 50
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 70
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 90
//               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 100
//    	};
    
    /************************************************************************
     * 
     * 			LG47E83
     * 
     ***********************************************************************/
        /***************************************************************
         * 			for AV
         **************************************************************/
        public static final int[] LG47E83_AV_BRIGHTNESS_TBL = {
           -1024, 
            -996, -968, -941, -914, -886, -858, -831, -804, -777, -750, //10
            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, //20
            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, //30
            -405, -386, -367, -348, -330, -312, -294, -276, -258, -238, //40
            -208, -178, -150, -122,  -92,  -64,  -36,   -8,   16,   40, //50 
              44,   48,   52,   56,   60,   64,   68,   72,   76,   80, //60
              86,   92,   99,  105,  112,  118,  124,  131,  137,  144, //70
              148, 153,  158,  163,  168,  172,  177,  182,  187,  192, //80
              195, 198,  201,  205,  208,  211,  215,  218,  221,  225, //90
              229, 233,  237,  242,  246,  250,  255,  259,  263,  268  //100
        };
        
        public static final int[] LG47E83_AV_CONTRAST_TBL = {
            -1024,
            -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965, //10
             -949,  -932,  -916,  -899, -883, -866, -850, -833, -817, -800, //20
             -772,  -743,  -714,  -685, -657, -628, -599, -570, -541, -512, //30
             -484,  -455,  -426,  -398, -369, -340, -312, -283, -254, -224, //40
             -194,  -168,  -142,  -116,  -90,  -64,  -38,  -12,   14,   40, //50
               44,    48,    52,    56,   60,   64,   68,   72,   76,   80, //60
               88,    96,   104,   112,  120,  128,  136,  144,  152,  160, //70
              168,   176,   184,   192,  200,  208,  216,  224,  232,  240, //80
              248,   256,   264,   272,  280,  288,  296,  304,  312,  320, //90
              328,   336,   344,   352,  360,  368,  376,  384,  392,  400  //100
        };

        public static final int[] LG47E83_AV_COLOR_TBL = {       
       -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
             -81,  -76,  -71,  -66,  -64,  -61,  -58,  -56, -53, -51, //20
             -48,  -46,  -43,  -40,  -38,  -35,  -33,  -33, -28, -25, //30
             -23,  -20,  -17,  -15,  -12,  -10,   -7,   -5,  -2,   0, //40
               3,    8,   13,   18,   23,   28,   33,   38,  43,  48, // 50
              49,   50,   51,   52,   53,   54,   55,   55,  56,  56, // 60
              57,   58,   59,   61,   64,   66,   69,   71,  74,  76, // 70
              79,   81,   84,   87,   89,   92,   94,   97,  99, 102,    //80
             104,  107,  107,  107,  110,  112,  112,  112, 115, 115,    //90
             117,  117,  120,  120,  122,  122,  125,  125, 127, 127
        // 100
    	};

        public static final int[] LG47E83_AV_HUE_TBL = {
     -25, -24, -24, -23, -23, -22, -22, -21, -21, -20, -20, // 10
	        -19,  -19,  -18,  -18,  -17,  -17,  -16, -16, -15, -15,    //20
	        -14,  -14,  -13,  -13,  -12,  -12,  -11, -11, -10, -10,    //30
	        -9,  -9,  -8,  -8,  -7,  -7,   -6,  -6,  -5,   -5,    //40
	          -4,    -4,   -3,   -3,   -2,   -2,   -1,  -1,  0,  0, // 50
	         1,   1,   2,   2,   3,   3,   4,  4,  5,  5, // 60
	         6,   6,   7,   7,   8,   8,   9,  9,  10,  10, // 70
	         11,   11,   12,   12,   13,   13,   14,  14,  15,  15,    //80
	        16,  16,  17,  17,  18,  18,  19, 19, 20,  20,    //90
	        21,  21,  22,  22,  23,  23,  24, 24, 25, 25
    };
        
        public static final int[] LG47E83_AV_SHARPNESS_TBL = {
    	     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
    			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
    			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
    			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
    			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
    			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
    			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
    			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
    			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100
        // 100
    	};

        /***************************************************************
         * 			for YPbPR
         **************************************************************/
        public static final int[] LG47E83_COMP_BRIGHTNESS_TBL = {
               -1024, 
               -996, -968, -941, -914, -886, -858, -831, -804, -777, -750, //10
               -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, //20
               -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, //30
               -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, //40
               -223, -195, -168, -140, -113,  -86,  -58,  -32,   -6,   20, //50
                 26,   32,   38,   44,   50,   56,   62,   68,   74,   80, //60
                  86,  92,   99,  105,  112,  118,  124,  131,  137,  144, //70
                148,  153,  158,  163,  168,  172,  177,  182,  187,  192, //80
                195,  198,  201,  205,  208,  211,  215,  218,   221, 225, //90
                229,  233,  237,  242,  246,  250,  255,  259,   263, 268  //100
      };

        public static final int[] LG47E83_COMP_CONTRAST_TBL = {
            -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
            -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
            -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
            -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
            -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
            112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
            224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
            336, 344, 352, 360, 368, 376, 384, 392, 400
    };

        public static final int[] LG47E83_COMP_COLOR_TBL = {
    -128, -122,-112, -112, -107,-102, -97, -94, -87, -81, -76, // 10
           -71,-66,-61, 58,-56, 53,-40, -35,   -33,   -25,    //20
           -20,-15,-10, -5,  0,  5, 7, 15, 20, 25,    //30
            28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
            53, 54, 56, 57, 59, 60, 62, 64, 65, 66, // 50
            79, 81, 84, 87, 89, 92, 92, 94, 94, 97, // 60
            97, 97, 99, 99, 99, 102, 102, 102, 104, 104, // 70
            91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
            112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
            120, 120, 120, 120, 120, 120, 120, 127, 127, 127
        // 100
    	};

        public static final int[] LG47E83_COMP_SHARPNESS_TBL = {
         0,     2,  4,  6,  8, 10, 12, 14, 16, 18,  20,    //10
    			22, 24, 26, 28, 30, 32, 34, 36, 38, 40, // 20
    			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 30
    			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 40
	            62, 64, 67, 70, 73, 76, 78, 82, 85, 88, // 50
	            89, 89, 90, 90, 90, 91, 91, 91, 92, 92, // 60
	            92, 92, 93, 93, 93, 93, 94, 94, 94, 94, // 70
	            95, 95, 95, 95, 95, 96, 96, 96, 96, 96, // 80
	            97, 97, 97, 97, 97, 98, 98, 98, 98, 98, // 90
	            99, 99, 99, 99, 99, 99, 100, 100, 100, 100
        // 100
     
    	};

        /***************************************************************
         * 			for VGA 
         **************************************************************/
        public static final int[] LG47E83_VGA_BRIGHTNESS_TBL = {
            -1024, -996, -968, -941, -914, -886, -858, -831, -804, -777, -750,
            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, -569, -553,
            -537, -521, -505, -489, -473, -457, -441, -425, -408, -390, -373, -355,
            -338, -320, -303, -285, -268, -250, -225, -200, -175, -150, -125, -100,
            -75, -50, -25, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 86, 92, 99,
            105, 112, 118, 124, 131, 137, 144, 148, 153, 158, 163, 168, 172, 177,
            182, 187, 192, 195, 198, 201, 205, 208, 211, 215, 218, 221, 225, 229,
            233, 237, 242, 246, 250, 255, 259, 263, 268
        };
       
        public static final int[] LG47E83_VGA_CONTRAST_TBL = {
            -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
            -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
            -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
            -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
            -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
            112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
            224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
            336, 344, 352, 360, 368, 376, 384, 392, 400
        };

        public static final int[] LG47E83_VGA_COLOR_TBL = {
            -128, -122, -112, -112, -107, -102, -97, -94, -87, -81, -76, // 10
    		-71, -66, -61, -58, -56, -53, -40, -35, -33, -25, // 20
    		-20, -15, -10, -5, 0, 5, 7, 15, 20, 25, // 30
    		28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
    		53, 56, 58, 61, 64, 66, 69, 71, 74, 76, // 50
    		79, 81, 84, 87, 89, 92, 92, 94, 94, 97, // 60
    		97, 97, 99, 99, 99, 102, 102, 102, 104, 104, // 70
    		91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
    		112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
            120, 120, 120, 120, 120, 120, 120, 127, 127, 127
        // 100
    	};

        public static final int[] LG47E83_VGA_SHARPNESS_TBL = {
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
    			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
    			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
    			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
    			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
    			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
    			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
    			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
    			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100
        // 100
      
    	};
        /***************************************************************
         * 			for HDMI 
         **************************************************************/
        public static final int[] LG47E83_HDMI_BRIGHTNESS_TBL = {
           	-1024,  -996 ,-968, -941 ,-914, -886, -858, -831, -804, -777, -750,
		            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, 
		            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, 
		            -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, 
		            -225, -192, -158, -124,  -92,  -60,  -27,    6,   38,   70, 
		              72,   74,   76,   78,   80,   82,   84,   86,   88,   90, 
		              91,   92,   93,   94,   95,   96,   97,   98,   88,  100,
		             105,  110,  115,  120,  125,  130,  135,  140,   145, 150,
		             153,  156,  159,  162,  165,  168,  171,  174,   177, 180,
		             182,  184,  186,  188,  190,  192,  194,  196,   198, 200
        };

        public static final int[] LG47E83_HDMI_CONTRAST_TBL = {
    	 -1024,-1019,-1013,-1008,-1002, -997, -991, -985 ,-980, -974, -968,  //10
	            -952, -935, -918, -901, -885, -868, -851, -834, -817, -800,  //20
	            -772, -743, -714, -685, -657, -628, -599, -570, -541, -512,  //30
	            -481, -450, -419, -388, -356, -325, -294, -263, -232, -200,  //40
	            -188, -176, -164, -152, -140, -128, -116, -104,  -92,  -80,  //50
	             -64,  -48,  -32,  -16,   0,   16,   32,   48,   64,   80,  //60
	              88,   96,  104,  112,  120,  128,  136,  144,  152,  160,  //70
	             168,  176,  184,  192,  200,  208,  216,  224,  232,  240,  //80
	             248,  256,  264,  272,  280,  288,  296,  304,  312,  320,  //90 
	             328,  336,  344,  352,  360,  368,  376,  384,  392,  400   //100
    	};

        public static final int[] LG47E83_HDMI_COLOR_TBL = {
      -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
             -81,  -76,  -71,  -66,  -64,  -61,  -58, -56, -53, -51,    //20
             -48,   -46,   -43,   -40,   -38,   -35,   -33,   -33,   -28,   -25,    //30
             -23,   -20,   -17,   -15,   -12,   -10,   -7,   -5,   -2,   0,    //40
               2,     7,    13,    19,    25,    30,   35,   41,   46,  51, // 50
              53,    55,    56,    57,    58,    60,   61,   62,   63,  64, // 60
              66,    67,    68,    69,    70,    71,   72,   73,   74,  76,    //70
              79,    81,    84,    87,    89,    92,   94,   97,   99,   102,    //80
             104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
            117, 117, 120, 120, 122, 122, 125, 125, 127, 127
        // 100
     };
        
        public static final int[] LG47E83_HDMI_SHARPNESS_TBL = {
            0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, // 10
            6, 6, 7, 7, 8, 8, 9, 9, 10, 10, // 20
            11, 11, 12, 12, 13, 13, 14, 14, 15, 15, // 30
            16, 16, 16, 17, 17, 18, 18, 19, 19, 20, // 40
            20, 21, 21, 22, 22, 23, 23, 24, 25, 26, // 50
            28, 30, 32, 34, 36, 38, 40, 42, 44, 46, // 60
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, // 70
    			57, 58, 59, 60, 61, 62, 63, 64, 65, 66, // 80
    			67, 68, 69, 70, 71, 72, 74, 76, 78, 80, // 90
            82, 84, 86, 88, 90, 92, 94, 96, 98, 100
        // 100
    	};
        
        /***************************************************************
         * 			for VideoPlayer 
         **************************************************************/
        public static final int[] LG47E83_MPEG_BRIGHTNESS_TBL = {
           	-1024,  -996 ,-968, -941 ,-914, -886, -858, -831, -804, -777, -750,  //10
		            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585,  //20
		            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425,  //30
		            -408, -390, -373, -355, -338, -320, -303, -285, -268, -250,  //40
		            -240, -230, -220, -210, -200, -190, -180, -170, -160, -150,  //50
		            -126, -102,  -78,  -54,  -30,   -6,   18,   42,   66,   90,  //60
		              91,   92,   93,   94,   95,   96,   97,   98,   88,  100,  //70
		             105,  110,  115,  120,  125,  130,  135,  140,   145, 150,  //80
		             153,  156,  159,  162,  165,  168,  171,  174,   177, 180,  //90
		             182,  184,  186,  188,  190,  192,  194,  196,   198, 200   //100
        };

        public static final int[] LG47E83_MPEG_CONTRAST_TBL = {
    	 -1024,-1019,-1013,-1008,-1002, -997, -991, -985 ,-980, -974, -968,  //10
	            -952, -935, -918, -901, -885, -868, -851, -834, -817, -800,  //20
	            -772, -743, -714, -685, -657, -628, -599, -570, -541, -512,  //30
	            -481, -450, -419, -388, -356, -325, -294, -263, -232, -200,  //40
	            -169, -138, -107,  -76,  -45,  -14,   17,   48,   79,  112,  //50
	             115,  118,  121,  124,  127,  130,  132,  134,  137,  140,  //60
	             142,  144,  146,  148,  150,  152,  154,  156,  158,  160,  //70
	             168,  176,  184,  192,  200,  208,  216,  224,  232,  240,  //80
	             248,  256,  264,  272,  280,  288,  296,  304,  312,  320,  //90 
	             328,  336,  344,  352,  360,  368,  376,  384,  392,  400   //100
    	};

        public static final int[] LG47E83_MPEG_COLOR_TBL = {
            -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
                   -81,  -76,  -71,  -66,  -64,  -61,  -58,  -56, -53, -51,    //20
                   -48,  -46,  -43,  -40,  -38,  -35,  -33,  -33, -28, -25,    //30
                   -23,  -20,  -17,  -15,  -12,  -10,   -7,   -5,  -2,   0,    //40
                     8,   16,   24,   32,   40,   48,   56,   64,  72,  80,   // 50
                    81,   82,   83,   84,   85,   86,   87,   88,   89, 90, // 60
                    91,   92,   92,   93,   93,   94,   94,   95,   95, 96,    //70
                    97,   98,   98,   99,   99,   100, 100,  101,  101,102,    //80
                   104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
                  117, 117, 120, 120, 122, 122, 125, 125, 127, 127        // 100
           };
        
//        public static final int[] LG47E83_MPEG_SHARPNESS_TBL = {
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 30
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 50
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 70
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 90
//            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 100
//    	};

        
        /************************************************************************
         * 
         * 			LG55E83
         * 
         ***********************************************************************/
            /***************************************************************
             * 			for AV
             **************************************************************/
            public static final int[] LG55E83_AV_BRIGHTNESS_TBL = {
               -1024, 
                -996, -968, -941, -914, -886, -858, -831, -804, -777, -750, //10
                -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, //20
                -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, //30
                -405, -386, -367, -348, -330, -312, -294, -276, -258, -238, //40
                -208, -178, -150, -122,  -92,  -64,  -36,   -8,   16,   40, //50 
                  44,   48,   52,   56,   60,   64,   68,   72,   76,   80, //60
                  86,   92,   99,  105,  112,  118,  124,  131,  137,  144, //70
                  148, 153,  158,  163,  168,  172,  177,  182,  187,  192, //80
                  195, 198,  201,  205,  208,  211,  215,  218,  221,  225, //90
                  229, 233,  237,  242,  246,  250,  255,  259,  263,  268  //100
            };
            
            public static final int[] LG55E83_AV_CONTRAST_TBL = {
                -1024,
                -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965, //10
                 -949,  -932,  -916,  -899, -883, -866, -850, -833, -817, -800, //20
                 -772,  -743,  -714,  -685, -657, -628, -599, -570, -541, -512, //30
                 -484,  -455,  -426,  -398, -369, -340, -312, -283, -254, -224, //40
                 -194,  -168,  -142,  -116,  -90,  -64,  -38,  -12,   14,   40, //50
                   44,    48,    52,    56,   60,   64,   68,   72,   76,   80, //60
                   88,    96,   104,   112,  120,  128,  136,  144,  152,  160, //70
                  168,   176,   184,   192,  200,  208,  216,  224,  232,  240, //80
                  248,   256,   264,   272,  280,  288,  296,  304,  312,  320, //90
                  328,   336,   344,   352,  360,  368,  376,  384,  392,  400  //100
            };

            public static final int[] LG55E83_AV_COLOR_TBL = {       
           -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
                 -81,  -76,  -71,  -66,  -64,  -61,  -58,  -56, -53, -51, //20
                 -48,  -46,  -43,  -40,  -38,  -35,  -33,  -33, -28, -25, //30
                 -23,  -20,  -17,  -15,  -12,  -10,   -7,   -5,  -2,   0, //40
                   3,    8,   13,   18,   23,   28,   33,   38,  43,  48, // 50
                  49,   50,   51,   52,   53,   54,   55,   55,  56,  56, // 60
                  57,   58,   59,   61,   64,   66,   69,   71,  74,  76, // 70
                  79,   81,   84,   87,   89,   92,   94,   97,  99, 102,    //80
                 104,  107,  107,  107,  110,  112,  112,  112, 115, 115,    //90
                 117,  117,  120,  120,  122,  122,  125,  125, 127, 127
            // 100
        	};

            public static final int[] LG55E83_AV_HUE_TBL = {
                -25, -24, -24, -23, -23, -22, -22, -21, -21, -20, -20, // 10
    	        -19,  -19,  -18,  -18,  -17,  -17,  -16, -16, -15, -15,    //20
    	        -14,  -14,  -13,  -13,  -12,  -12,  -11, -11, -10, -10,    //30
    	        -9,  -9,  -8,  -8,  -7,  -7,   -6,  -6,  -5,   -5,    //40
    	          -4,    -4,   -3,   -3,   -2,   -2,   -1,  -1,  0,  0, // 50
    	         1,   1,   2,   2,   3,   3,   4,  4,  5,  5, // 60
    	         6,   6,   7,   7,   8,   8,   9,  9,  10,  10, // 70
    	         11,   11,   12,   12,   13,   13,   14,  14,  15,  15,    //80
    	        16,  16,  17,  17,  18,  18,  19, 19, 20,  20,    //90
    	        21,  21,  22,  22,  23,  23,  24, 24, 25, 25
        };
            
            public static final int[] LG55E83_AV_SHARPNESS_TBL = {
        	     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
        			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
        			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
        			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
        			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
        			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
        			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
        			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
        			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
                91, 92, 93, 94, 95, 96, 97, 98, 99, 100
            // 100
        	};

            /***************************************************************
             * 			for YPbPR
             **************************************************************/
            public static final int[] LG55E83_COMP_BRIGHTNESS_TBL = {
                   -1024, 
                   -996, -968, -941, -914, -886, -858, -831, -804, -777, -750, //10
                   -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, //20
                   -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, //30
                   -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, //40
                   -231, -212, -193, -173, -154, -135, -116,  -96,  -77,  -58, //50
                    -44,  -30,  -16,   -2,   12,   26,   40,   53,   66,   80, //60
                     86,   92,   99,  105,  112,  118,  124,  131,  137,  144, //70
                    148,  153,  158,  163,  168,  172,  177,  182,  187,  192, //80
                    195,  198,  201,  205,  208,  211,  215,  218,   221, 225, //90
                    229,  233,  237,  242,  246,  250,  255,  259,   263, 268  //100
          };

            public static final int[] LG55E83_COMP_CONTRAST_TBL = {
                -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
                -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
                -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
                -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
                -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
                112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
                224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
                336, 344, 352, 360, 368, 376, 384, 392, 400
        };

            public static final int[] LG55E83_COMP_COLOR_TBL = {
        -128, -122,-112, -112, -107,-102, -97, -94, -87, -81, -76, // 10
               -71,-66,-61, 58,-56, 53,-40, -35,   -33,   -25,    //20
               -20,-15,-10, -5,  0,  5, 7, 15, 20, 25,    //30
                28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
                54, 57, 60, 63, 66, 68, 71, 74, 77, 80, // 50
                82, 84, 86, 88, 90, 92, 94, 95, 96, 97, // 60
                97, 98, 98, 99, 99, 102, 102, 102, 104, 104, // 70
                91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
                112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
                120, 120, 120, 120, 120, 120, 120, 127, 127, 127
            // 100
        	};

            public static final int[] LG55E83_COMP_SHARPNESS_TBL = {
             0,     2,  4,  6,  8, 10, 12, 14, 16, 18,  20,    //10
        			22, 24, 26, 28, 30, 32, 34, 36, 38, 40, // 20
        			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 30
        			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 40
    	            62, 64, 67, 70, 73, 76, 78, 82, 85, 88, // 50
    	            89, 89, 90, 90, 90, 91, 91, 91, 92, 92, // 60
    	            92, 92, 93, 93, 93, 93, 94, 94, 94, 94, // 70
    	            95, 95, 95, 95, 95, 96, 96, 96, 96, 96, // 80
    	            97, 97, 97, 97, 97, 98, 98, 98, 98, 98, // 90
    	            99, 99, 99, 99, 99, 99, 100, 100, 100, 100
            // 100
         
        	};

            /***************************************************************
             * 			for VGA 
             **************************************************************/
            public static final int[] LG55E83_VGA_BRIGHTNESS_TBL = {
                -1024, -996, -968, -941, -914, -886, -858, -831, -804, -777, -750,
                -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, -569, -553,
                -537, -521, -505, -489, -473, -457, -441, -425, -408, -390, -373, -355,
                -338, -320, -303, -285, -268, -250, -225, -200, -175, -150, -125, -100,
                -75, -50, -25, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 86, 92, 99,
                105, 112, 118, 124, 131, 137, 144, 148, 153, 158, 163, 168, 172, 177,
                182, 187, 192, 195, 198, 201, 205, 208, 211, 215, 218, 221, 225, 229,
                233, 237, 242, 246, 250, 255, 259, 263, 268
            };
           
            public static final int[] LG55E83_VGA_CONTRAST_TBL = {
                -1024, -1019, -1013, -1007, -1001, -995, -989, -983, -977, -971, -965,
                -949, -932, -916, -899, -883, -866, -850, -833, -817, -800, -772, -743,
                -714, -685, -657, -628, -599, -570, -541, -512, -484, -455, -426, -398,
                -369, -340, -312, -283, -254, -225, -203, -180, -158, -135, -113, -90,
                -68, -45, -23, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104,
                112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216,
                224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328,
                336, 344, 352, 360, 368, 376, 384, 392, 400
            };

            public static final int[] LG55E83_VGA_COLOR_TBL = {
                -128, -122, -112, -112, -107, -102, -97, -94, -87, -81, -76, // 10
        		-71, -66, -61, -58, -56, -53, -40, -35, -33, -25, // 20
        		-20, -15, -10, -5, 0, 5, 7, 15, 20, 25, // 30
        		28, 30, 33, 35, 38, 40, 43, 46, 48, 51, // 40
        		53, 56, 58, 61, 64, 66, 69, 71, 74, 76, // 50
        		79, 81, 84, 87, 89, 92, 92, 94, 94, 97, // 60
        		97, 97, 99, 99, 99, 102, 102, 102, 104, 104, // 70
        		91, 107, 107, 107, 110, 110, 110, 112, 112, 112, // 80
        		112, 115, 112, 117, 112, 112, 120, 120, 120, 122, // 90
                120, 120, 120, 120, 120, 120, 120, 127, 127, 127
            // 100
        	};

            public static final int[] LG55E83_VGA_SHARPNESS_TBL = {
             0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,    //10
        			11, 12, 13, 14, 15, 16, 17, 18, 19, 20, // 20
        			21, 22, 23, 24, 25, 26, 27, 28, 29, 30, // 30
        			31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 40
        			41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 50
        			51, 52, 53, 54, 55, 56, 57, 58, 59, 60, // 60
        			61, 62, 63, 64, 65, 66, 67, 68, 69, 70, // 70
        			71, 72, 73, 74, 75, 76, 77, 78, 79, 80, // 80
        			81, 82, 83, 84, 85, 86, 87, 88, 89, 90, // 90
                91, 92, 93, 94, 95, 96, 97, 98, 99, 100
            // 100
          
        	};
            /***************************************************************
             * 			for HDMI 
             **************************************************************/
            public static final int[] LG55E83_HDMI_BRIGHTNESS_TBL = {
               	-1024,  -996 ,-968, -941 ,-914, -886, -858, -831, -804, -777, -750,
    		            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585, 
    		            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425, 
    		            -408, -390, -373, -355, -338, -320, -303, -285, -268, -250, 
    		            -225, -192, -158, -124,  -92,  -60,  -27,    6,   38,   70, 
    		              72,   74,   76,   78,   80,   82,   84,   86,   88,   90, 
    		              91,   92,   93,   94,   95,   96,   97,   98,   88,  100,
    		             105,  110,  115,  120,  125,  130,  135,  140,   145, 150,
    		             153,  156,  159,  162,  165,  168,  171,  174,   177, 180,
    		             182,  184,  186,  188,  190,  192,  194,  196,   198, 200
            };

            public static final int[] LG55E83_HDMI_CONTRAST_TBL = {
        	 -1024,-1019,-1013,-1008,-1002, -997, -991, -985 ,-980, -974, -968,  //10
    	            -952, -935, -918, -901, -885, -868, -851, -834, -817, -800,  //20
    	            -772, -743, -714, -685, -657, -628, -599, -570, -541, -512,  //30
    	            -481, -450, -419, -388, -356, -325, -294, -263, -232, -200,  //40
    	            -188, -176, -164, -152, -140, -128, -116, -104,  -92,  -80,  //50
    	             -64,  -48,  -32,  -16,   0,   16,   32,   48,   64,   80,  //60
    	              88,   96,  104,  112,  120,  128,  136,  144,  152,  160,  //70
    	             168,  176,  184,  192,  200,  208,  216,  224,  232,  240,  //80
    	             248,  256,  264,  272,  280,  288,  296,  304,  312,  320,  //90 
    	             328,  336,  344,  352,  360,  368,  376,  384,  392,  400   //100
        	};

            public static final int[] LG55E83_HDMI_COLOR_TBL = {
          -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
                 -81,  -76,  -71,  -66,  -64,  -61,  -58, -56, -53, -51, //20
                 -48,  -46,  -43,  -40,  -38,  -35,  -33, -33, -28, -25, //30
                 -23,  -20,  -17,  -15,  -12,  -10,   -7,  -5,  -2,   0,    //40
                   6,   12,   19,   26,   33,   40,   46,  52,  58,  64, // 50
                  65,   66,   67,   68,   69,   69,   70,  70,  71,  71, // 60
                  72,   72,   73,   73,   74,   74,   75,  75,  76,  76,    //70
                  79,   81,   84,   87,   89,   92,   94,  97,  99, 102,    //80
                 104,  107,  107,  107,  110,  112,  112,  112,115, 115,    //90
                 117,  117,  120,  120,  122,  122,  125,  125,127, 127
            // 100
         };
            
            public static final int[] LG55E83_HDMI_SHARPNESS_TBL = {
                0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, // 10
                6, 6, 7, 7, 8, 8, 9, 9, 10, 10, // 20
                11, 11, 12, 12, 13, 13, 14, 14, 15, 15, // 30
                16, 16, 16, 17, 17, 18, 18, 19, 19, 20, // 40
                20, 21, 21, 22, 22, 23, 23, 24, 25, 26, // 50
                28, 30, 32, 34, 36, 38, 40, 42, 44, 46, // 60
                47, 48, 49, 50, 51, 52, 53, 54, 55, 56, // 70
        			57, 58, 59, 60, 61, 62, 63, 64, 65, 66, // 80
        			67, 68, 69, 70, 71, 72, 74, 76, 78, 80, // 90
                82, 84, 86, 88, 90, 92, 94, 96, 98, 100
            // 100
        	};
            /***************************************************************
             * 			for VideoPlayer 
             **************************************************************/
            public static final int[] LG55E83_MPEG_BRIGHTNESS_TBL = {
               	-1024,  -996 ,-968, -941 ,-914, -886, -858, -831, -804, -777, -750,  //10
	            -734, -717, -701, -684, -668, -651, -635, -618, -602, -585,  //20
	            -569, -553, -537, -521, -505, -489, -473, -457, -441, -425,  //30
	            -408, -390, -373, -355, -338, -320, -303, -285, -268, -250,  //40
	            -240, -230, -220, -210, -200, -190, -180, -170, -160, -150,  //50
	            -126, -102,  -78,  -54,  -30,   -6,   18,   42,   66,   90,  //60
	              91,   92,   93,   94,   95,   96,   97,   98,   88,  100,  //70
	             105,  110,  115,  120,  125,  130,  135,  140,   145, 150,  //80
	             153,  156,  159,  162,  165,  168,  171,  174,   177, 180,  //90
	             182,  184,  186,  188,  190,  192,  194,  196,   198, 200   //100
            };

            public static final int[] LG55E83_MPEG_CONTRAST_TBL = {
        	 -1024,-1019,-1013,-1008,-1002, -997, -991, -985 ,-980, -974, -968,  //10
    	            -952, -935, -918, -901, -885, -868, -851, -834, -817, -800,  //20
    	            -772, -743, -714, -685, -657, -628, -599, -570, -541, -512,  //30
    	            -481, -450, -419, -388, -356, -325, -294, -263, -232, -200,  //40
    	            -169, -138, -107,  -76,  -45,  -14,   17,   48,   79,  112,  //50
    	             115,  118,  121,  124,  127,  130,  132,  134,  137,  140,  //60
    	             142,  144,  146,  148,  150,  152,  154,  156,  158,  160,  //70
    	             168,  176,  184,  192,  200,  208,  216,  224,  232,  240,  //80
    	             248,  256,  264,  272,  280,  288,  296,  304,  312,  320,  //90 
    	             328,  336,  344,  352,  360,  368,  376,  384,  392,  400   //100
        	};

            public static final int[] LG55E83_MPEG_COLOR_TBL = {
                -128, -125, -125, -122, -117, -112, -107, -102, -97, -94, -92, // 10
                       -81,  -76,  -71,  -66,  -64,  -61,  -58,  -56, -53, -51,    //20
                       -48,  -46,  -43,  -40,  -38,  -35,  -33,  -33, -28, -25,    //30
                       -23,  -20,  -17,  -15,  -12,  -10,   -7,   -5,  -2,   0,    //40
                         8,   16,   24,   32,   40,   48,   56,   64,  72,  80,   // 50
                        81,   82,   83,   84,   85,   86,   87,   88,   89, 90, // 60
                        91,   92,   92,   93,   93,   94,   94,   95,   95, 96,    //70
                        97,   98,   98,   99,   99,   100, 100,  101,  101,102,    //80
                       104,   107,   107,   107,   110,   112,   112,   112,   115,   115,    //90
                      117, 117, 120, 120, 122, 122, 125, 125, 127, 127        // 100
               };
//            public static final int[] LG55E83_MPEG_SHARPNESS_TBL = {
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 30
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 50
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 70
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 90
//                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 100
//        	};
            
	public static VppParam gParam = new VppParam();
	public static RGBogo gRGBogo = new RGBogo();

	public enum PictureMode {
		STANDARD, VIVID, SOFT, USER, END
	}

	public enum ScreenMode {
		MODE169, PERSON, MOVIE, CAPTION, MODE43, FULL, END
	}

	public enum ColorManageMode {
		OFF, OPTIMIZE, ENHANCE, COLORDEMO, SPLITDEMO, END
	}

	public enum ColorDemoMode {
		ALLON, YOFF, COFF, GOFF, MOFF, ROFF, BOFF, RGBOFF, YMCOFF, ALLOFF, END
	}

	public enum ColorTemp {
		COLD, STANDARD, WARM, END
	}

	public enum NoiseRd {
		OFF, LOW, MID, HIGH, AUTO, END
	}

	public enum SSCRange {
		RATIO_1, RATIO_1D5, RATIO_2, RATIO_3D5, RATIO_4D5
	}

	public static void InitTvVpp() {
		if (IsVppOpened == true)
			return;

		int ret = OpenVPPModule();
		IsVppOpened = true;
		Log.d(DBTAG, "open vpp module = " + ret);
		gRGBogo.en = 1;
		SetRGBogo(gRGBogo);
		LoadVppSetting(vdinJNI.GetSrcType());
	}

	public static void UninitTvVpp() {
	}

	public static void LoadVppSetting(SrcType srcType) {
		int val;

		val = eepromJNI.LoadVideoSetting(srcType, VideoFunc.PICTURE_MODE);
		UiSetPicMode(val, 1);

        val = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.SHARPNESS);
		UiSetSharpness(true, val);

		val = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.NOISE_RE);
		UiSetNoiseRd(srcType, val);

		val = eepromJNI.LoadMiscSetting(MISCFunc.COLOR_MANAGEMENT);
		UiSetBaseColor(val);
		
//		UiSetHue(50);
		val = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.HUE);
		UiSetHue(val);

		val = eepromJNI.LoadVideoSetting(srcType, VideoFunc.COLOR_TEMP);
		UiSetColorTemp(srcType, val);

		val = eepromJNI.LoadVideoSetting(srcType, VideoFunc.ASPECT_RAT);
		UiSetScrMode(val);
		
		if(srcType == SrcType.MPEG)
			UiSetDNLP(1, 0xf0, 4, 4, 1);
	}

	public static void SetToplayer(int chromaEn, int satSel, int uvAdjEn,
			int rgbTohueEn, int cscSel) {
		CmConfig gTop = new CmConfig();
		gTop.SetData(chromaEn, satSel, uvAdjEn, rgbTohueEn, cscSel);
		SetCMTopLayer(gTop);
	}

	public static void UiSetUserModeVideoSetting() {
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();
        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
		if (picMode < vppJNI.PictureMode.USER.ordinal()) {
			Log.d("Haha", "srcType:" + srcType + "  picMode:" + picMode);
			gParam = gParam.GetPicModeData(srcType, picMode);
            eepromJNI.SaveVideoSettingDirect(srcType, eepromJNI.VideoFunc.BRIGHTNESS, gParam.brightness);
            eepromJNI.SaveVideoSettingDirect(srcType, eepromJNI.VideoFunc.CONTRAST, gParam.contrast);
            eepromJNI.SaveVideoSettingDirect(srcType, eepromJNI.VideoFunc.COLOR, gParam.color);
            // eepromJNI.SaveVideoSettingDirect(srcType, eepromJNI.VideoFunc.HUE, gParam.hue);
            eepromJNI.SaveVideoSettingDirect(srcType, eepromJNI.VideoFunc.SHARPNESS, gParam.sharpness);
		}
	}

	public static void UiSetBrightness(int uiValue) {
		// int setValue = (uiValue - 50) * 2;
		// setValue = (256 * setValue) / 100;
		// if (setValue == 256)
		// setValue = 255;
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();

        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
		if (picMode == PictureMode.USER.ordinal())
            eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.BRIGHTNESS, uiValue);

		if (uiValue > 100 || uiValue < 0)
			return;

		int setValue;
		
		switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				if (srcType == SrcType.AV){
		        	setValue = LG42E83_AV_BRIGHTNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG42E83_COMPONENT_BRIGHTNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG42E83_VGA_BRIGHTNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG42E83_HDMI_BRIGHTNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG42E83_MPEG_BRIGHTNESS_TABLE[uiValue];
				} else {
					setValue = LG42E83_AV_BRIGHTNESS_TABLE[uiValue];
				}
				break;
			case LG47E83:
			case LG47E85:
				if (srcType == SrcType.AV){
		        	setValue = LG47E83_AV_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG47E83_COMP_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG47E83_VGA_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG47E83_HDMI_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG47E83_MPEG_BRIGHTNESS_TBL[uiValue];
				} else {
					setValue = LG47E83_AV_BRIGHTNESS_TBL[uiValue];
				}
				break;
			case LG55E83:	
				if (srcType == SrcType.AV){
		        	setValue = LG55E83_AV_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG55E83_COMP_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG55E83_VGA_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG55E83_HDMI_BRIGHTNESS_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG55E83_MPEG_BRIGHTNESS_TBL[uiValue];
				} else {
					setValue = LG55E83_AV_BRIGHTNESS_TBL[uiValue];
				}
				break;
		}
        
		vppJNI.SetBrightness(setValue);
	}

	public static void UiSetContrast(int uiValue) {
		// int setValue = (uiValue - 50) * 2;
		// setValue = (128 * setValue) / 100;
		// if (setValue == 128)
		// setValue = 127;
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();

        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
		if (picMode == PictureMode.USER.ordinal())
            eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.CONTRAST, uiValue);

		if (uiValue > 100 || uiValue < 0)
			return;

		int setValue;
		
		switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				    if (srcType == SrcType.AV) {
			        	setValue = LG42E83_AV_CONTRAST_TABLE[uiValue];
			        } else if (srcType == SrcType.COMPONENT) {
						setValue = LG42E83_COMPONENT_CONTRAST_TABLE[uiValue];
			        } else if (srcType == SrcType.VGA) {
						setValue = LG42E83_VGA_CONTRAST_TABLE[uiValue];
			        } else if (srcType == SrcType.HDMI) {
						setValue = LG42E83_HDMI_CONTRAST_TABLE[uiValue];
			        } else if (srcType == SrcType.MPEG) {
			        	setValue = LG42E83_MPEG_CONTRAST_TABLE[uiValue];
					} else {
						setValue = LG42E83_AV_CONTRAST_TABLE[uiValue];
					}
				break;
			case LG47E83:	
			case LG47E85:
			    if (srcType == SrcType.AV) {
		        	setValue = LG47E83_AV_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG47E83_COMP_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG47E83_VGA_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG47E83_HDMI_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG47E83_MPEG_CONTRAST_TBL[uiValue];
				} else {
					setValue = LG47E83_AV_CONTRAST_TBL[uiValue];
				}
				break;
			case LG55E83:
			    if (srcType == SrcType.AV) {
		        	setValue = LG55E83_AV_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG55E83_COMP_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG55E83_VGA_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG55E83_HDMI_CONTRAST_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG55E83_MPEG_CONTRAST_TBL[uiValue];
				} else {
					setValue = LG55E83_AV_CONTRAST_TBL[uiValue];
				}				
				break;
		}
       
		vppJNI.SetContrast(setValue);
	}

	public static void UiSetColor(int uiValue) {
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();

        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
		if (picMode == PictureMode.USER.ordinal())
            eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.COLOR, uiValue);

		if (uiValue > 100 || uiValue < 0)
			return;

		int setValue, hueValue;
		hueValue = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.HUE);
	
		switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				if (srcType == SrcType.AV){
		        	setValue = LG42E83_AV_COLOR_TABLE[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG42E83_COMPONENT_COLOR_TABLE[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG42E83_VGA_COLOR_TABLE[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG42E83_HDMI_COLOR_TABLE[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG42E83_MPEG_COLOR_TABLE[uiValue];
				} else {
					setValue = LG42E83_AV_COLOR_TABLE[uiValue];
				}
				break;
			case LG47E83:
			case LG47E85:
				if (srcType == SrcType.AV){
		        	setValue = LG47E83_AV_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG47E83_COMP_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG47E83_VGA_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG47E83_HDMI_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG47E83_MPEG_COLOR_TBL[uiValue];
				} else {
					setValue = LG47E83_AV_COLOR_TBL[uiValue];
				}
				break;
			case LG55E83:
				if (srcType == SrcType.AV){
		        	setValue = LG55E83_AV_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.COMPONENT) {
					setValue = LG55E83_COMP_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG55E83_VGA_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG55E83_HDMI_COLOR_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG55E83_MPEG_COLOR_TBL[uiValue];
				} else {
					setValue = LG55E83_AV_COLOR_TBL[uiValue];
				}				
				break;
	    }

        switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				hueValue = LG42E83_AV_HUE_TBL[hueValue];
				break;
			case LG47E83:
			case LG47E85:	
				hueValue = LG47E83_AV_HUE_TBL[hueValue];
				break;
			case LG55E83:
				hueValue = LG55E83_AV_HUE_TBL[hueValue];
				break;	
        }
        
		if (srcType != SrcType.AV) {
			hueValue = 0;
            Log.d(DBTAG, "UiSetColor()::source_input !=AV, set hue =0(have no effect).");
		} else {
			if (vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_I.ordinal()
				|| vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_M.ordinal()
	            || vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_60.ordinal()
	            || vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_CN.ordinal()) {
				hueValue = 0;
				Log.d(DBTAG,"UiSetHue()::source_input ==AV, format !=NTSC set hue =0(have no effect).");
				}
		}

		//Log.d(DBTAG,"Set saturation value = "+ setValue);
		vppJNI.SetSaturationHue(setValue, hueValue);
	}

	public static void UiSetHue(int uiValue) {
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();

//        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
//		if (picMode == PictureMode.USER.ordinal())
            eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.HUE, uiValue);

		if (uiValue > 100 || uiValue < 0)
			return;

		int setValue, colorValue;
        colorValue = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.COLOR);

        switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				setValue = LG42E83_AV_HUE_TBL[uiValue];
				break;
			case LG47E83:
			case LG47E85:	
				setValue = LG47E83_AV_HUE_TBL[uiValue];
				break;
			case LG55E83:
				setValue = LG55E83_AV_HUE_TBL[uiValue];
				break;	
        }
        
        switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				if (srcType == SrcType.AV){
					colorValue = LG42E83_AV_COLOR_TABLE[colorValue];
		        } else if (srcType == SrcType.COMPONENT) {
		        	colorValue = LG42E83_COMPONENT_COLOR_TABLE[colorValue];
		        } else if (srcType == SrcType.VGA) {
		        	colorValue = LG42E83_VGA_COLOR_TABLE[colorValue];
		        } else if (srcType == SrcType.HDMI) {
		        	colorValue = LG42E83_HDMI_COLOR_TABLE[colorValue];
		        } else if (srcType == SrcType.MPEG) {
		        	colorValue = LG42E83_MPEG_COLOR_TABLE[colorValue];
				} else {
					colorValue = LG42E83_AV_COLOR_TABLE[colorValue];
				}
				break;
			case LG47E83:
			case LG47E85:
				if (srcType == SrcType.AV){
					colorValue = LG47E83_AV_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.COMPONENT) {
		        	colorValue = LG47E83_COMP_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.VGA) {
		        	colorValue = LG47E83_VGA_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.HDMI) {
		        	colorValue = LG47E83_HDMI_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.MPEG) {
		        	colorValue = LG47E83_MPEG_COLOR_TBL[colorValue];
				} else {
					colorValue = LG47E83_AV_COLOR_TBL[colorValue];
				}
				break;
			case LG55E83:
				if (srcType == SrcType.AV){
					colorValue = LG55E83_AV_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.COMPONENT) {
		        	colorValue = LG55E83_COMP_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.VGA) {
		        	colorValue = LG55E83_VGA_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.HDMI) {
		        	colorValue = LG55E83_HDMI_COLOR_TBL[colorValue];
		        } else if (srcType == SrcType.MPEG) {
		        	colorValue = LG55E83_MPEG_COLOR_TBL[colorValue];
				} else {
					colorValue = LG55E83_AV_COLOR_TBL[colorValue];
				}				
				break;
	    }

		if (srcType != SrcType.AV) {
			setValue = 0;
			Log.d(DBTAG,"UiSetHue()::source_input !=AV, set hue =0(have no effect).");
		} else {
			if (vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_I.ordinal()
				|| vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_M.ordinal()
                || vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_60.ordinal()
                || vdinJNI.GetSigFormat() == SigFormat.CVBS_PAL_CN.ordinal()) {
				setValue = 0;
				Log.d(DBTAG,"UiSetHue()::source_input ==AV, format !=NTSC set hue =0(have no effect).");
			}
		}

		vppJNI.SetSaturationHue(colorValue, setValue);
	}

	public static void SetGammaTbl(boolean isTurnOn, int uiValue) {
		if (isTurnOn == true)
			vppJNI.SetGammaOnOff(1);
		else
			vppJNI.SetGammaOnOff(0);

		if (uiValue >= 0 && uiValue <= 2)
			SetColorTemp(uiValue);
		else
			SetColorTemp(0);
	}

	public static void UiSetColorTemp(vdinJNI.SrcType srcType, int uiValue) {
		Gamma gammaCfg = new Gamma();
		RGBogo temRGBogo = (RGBogo) gRGBogo.clone();

		SrcType constType = SrcType.MPEG; // only in 3UI video setting
        if( srcType == SrcType.HDMI){
        	constType = SrcType.HDMI;
        }

		eepromJNI.SaveVideoSetting(SrcType.AV, VideoFunc.COLOR_TEMP,	uiValue);
		eepromJNI.SaveVideoSetting(SrcType.COMPONENT, VideoFunc.COLOR_TEMP,	uiValue);
		eepromJNI.SaveVideoSetting(SrcType.HDMI, VideoFunc.COLOR_TEMP,	uiValue);
		eepromJNI.SaveVideoSetting(SrcType.VGA, VideoFunc.COLOR_TEMP,	uiValue);
		eepromJNI.SaveVideoSetting(SrcType.MPEG, VideoFunc.COLOR_TEMP,	uiValue);
		
		PanelType panelType = eepromJNI.LoadCurPanelType();
		vppJNI.SetGammaOnOff(1); // turn on gamma

		gammaCfg.SetStandard(panelType);

        if(constType == SrcType.HDMI){
	        if (uiValue == ColorTemp.STANDARD.ordinal()) {
	            temRGBogo.r_gain = 1024;
	            temRGBogo.g_gain = 1000;
	            temRGBogo.b_gain = 1016;
	        } else if (uiValue == ColorTemp.WARM.ordinal()) {
	            temRGBogo.r_gain = 1008;
	            temRGBogo.g_gain = 1024;
	            temRGBogo.b_gain = 927;
	        } else if (uiValue == ColorTemp.COLD.ordinal()) {
	            temRGBogo.r_gain = 996;
	            temRGBogo.g_gain = 993;
	            temRGBogo.b_gain = 1024;
	        }        	
        }else{
		if (uiValue == ColorTemp.STANDARD.ordinal()) {
			temRGBogo.r_gain = 1024; 
			temRGBogo.g_gain = 1024;
			temRGBogo.b_gain = 1024;
		} else if (uiValue == ColorTemp.WARM.ordinal()) {
			temRGBogo.r_gain = 1008; 
			temRGBogo.g_gain = 1024;
			temRGBogo.b_gain = 927;
		} else if (uiValue == ColorTemp.COLD.ordinal()) {
			temRGBogo.r_gain = 996;
			temRGBogo.g_gain = 993;
			temRGBogo.b_gain = 1024; 
		}
        }

		SetRGBogo(temRGBogo);
		temRGBogo.DbPrint();
		gRGBogo.DbPrint();
	}

	public static void UiSetSharpness(boolean isTurnOn, int uiValue) {
		vdinJNI.SrcType srcType = vdinJNI.GetSrcType();
        int picMode = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE);
        int cur3Dstatus = vdinJNI.Get3DStatus();
        
		// save setting only for user mode
		if (picMode == 3)
            eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.SHARPNESS, uiValue);
		if (uiValue > 100 || uiValue < 0)
			return;

		Sharpness sharpness = new Sharpness();
		int val5bit = 0, val8bit = 0, val80blend = 0, val10blend = 0, nlp_cor_thr = 0, enable = 0;

		int setValue;
		switch(eepromJNI.LoadCurPanelType()){
			default:
			case LG42E83:
			case LG42E85:
				if (srcType == SrcType.AV){
		        	setValue = LG42E83_AV_SHARPNESS_TABLE[uiValue];
		    	} else if (srcType == SrcType.COMPONENT) {
					setValue = LG42E83_COMPONENT_SHARPNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG42E83_VGA_SHARPNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG42E83_HDMI_SHARPNESS_TABLE[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG42E83_HDMI_SHARPNESS_TABLE[50];//LG42E83_MPEG_SHARPNESS_TABLE[uiValue];
				} else {
					setValue = LG42E83_AV_SHARPNESS_TABLE[uiValue];
				}
				break;
			case LG47E83:
			case LG47E85:
				if (srcType == SrcType.AV){
		        	setValue = LG47E83_AV_SHARPNESS_TBL[uiValue];
		    	} else if (srcType == SrcType.COMPONENT) {
					setValue = LG47E83_COMP_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG47E83_VGA_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG47E83_HDMI_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG47E83_HDMI_SHARPNESS_TBL[50];//LG47E83_MPEG_SHARPNESS_TBL[uiValue];
				} else {
					setValue = LG47E83_AV_SHARPNESS_TBL[uiValue];
				}
				break;
			case LG55E83:
				if (srcType == SrcType.AV){
		        	setValue = LG55E83_AV_SHARPNESS_TBL[uiValue];
		    	} else if (srcType == SrcType.COMPONENT) {
					setValue = LG55E83_COMP_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.VGA) {
					setValue = LG55E83_VGA_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.HDMI) {
					setValue = LG55E83_HDMI_SHARPNESS_TBL[uiValue];
		        } else if (srcType == SrcType.MPEG) {
		        	setValue = LG55E83_HDMI_SHARPNESS_TBL[50];//LG55E83_MPEG_SHARPNESS_TBL[uiValue];
				} else {
					setValue = LG55E83_AV_SHARPNESS_TBL[uiValue];
				}
				break;
        }
		
		val5bit = (setValue * 31 + 50) / 100;
		val8bit = (setValue * 255 + 50) / 100;
		val80blend = (setValue * 127 + 50) / 100;
		val10blend = (setValue * 15 + 50) / 100;

		if (isTurnOn == true)
			enable = 1;
		else
			enable = 0;

		if (srcType == SrcType.VGA){
			Log.d(DBTAG, "VGA turn off sharpness.");
			enable = 0;
		}
		
		// patch for component on peaking gain
        if (srcType == SrcType.COMPONENT) {
			val5bit = (val5bit + 1) >> 1;
		}

		// patch on non-linear-processing coring threshold
        if (srcType == SrcType.AV) {
			nlp_cor_thr = 0x08;
            Log.d(DBTAG, "CVBS sharpness setting nlp_cor_thr" + nlp_cor_thr);
        } else if (srcType == SrcType.HDMI 
        		|| srcType == srcType.MPEG) {
			nlp_cor_thr = 0x04;
            Log.d(DBTAG, "HDMI/MPEG sharpness setting nlp_cor_thr" + nlp_cor_thr);
		} else {
			nlp_cor_thr = 0x08;
            Log.d(DBTAG, "Other source sharpness setting nlp_cor_thr"
                + nlp_cor_thr);
		}

		// Enable
		// Horizontal Peaking
		// Horizontal LTI
		// Vertical & Slope Peaking
		// Vertical LTI
		// CTI
		sharpness.en = enable;

		sharpness.peak_gain_h1 = val5bit;
		sharpness.peak_gain_h2 = val5bit;
		sharpness.peak_gain_h3 = val5bit;
		sharpness.peak_gain_h4 = val5bit;
		sharpness.peak_gain_h5 = val5bit;

		sharpness.peak_gain_v1 = val5bit;
		sharpness.peak_gain_v2 = val5bit;
		sharpness.peak_gain_v3 = val5bit;
		sharpness.peak_gain_v4 = val5bit;
		sharpness.peak_gain_v5 = val5bit;
		sharpness.peak_gain_v6 = val5bit;

		sharpness.hpeak_nlp_cor_thr = nlp_cor_thr;
		sharpness.vpeak_nlp_cor_thr = nlp_cor_thr;
		sharpness.speak_nlp_cor_thr = nlp_cor_thr;

		sharpness.vlti_gain_pos = val8bit;
		sharpness.vlti_gain_neg = val8bit;
		sharpness.vlti_blend_factor = val80blend;

		sharpness.hlti_gain_pos = val8bit;
		sharpness.hlti_gain_neg = val8bit;
		sharpness.hlti_blend_factor = val80blend;

        // patch for cti_blend_factor
        if (srcType == SrcType.AV) {
            sharpness.cti_blend_factor = 0x0e;
        } else {
		sharpness.cti_blend_factor = val10blend;
        }

        sharpness.hcti_gain = val8bit;

        if(cur3Dstatus == Mode3D.MODE_2D_TO_3D.ordinal()){
        	sharpness.hlimit_coef_h = 0x00;
        	Log.d(DBTAG, "3D mode 2D->3D ,hlimit_coef_h = 0x00");
        }else{
        	sharpness.hlimit_coef_h = 0x06;
        	Log.d(DBTAG, "!2D->3D ,hlimit_coef_h = 0x06");
        }
        
        if(srcType == SrcType.MPEG){
        	if(cur3Dstatus == Mode3D.DISABLE.ordinal()){
	    		sharpness.peak_gain_h1 = 0;
	    		sharpness.peak_gain_h2 = 0;
	    		sharpness.peak_gain_h3 = 0;
	    		sharpness.peak_gain_h4 = 0;
	    		sharpness.peak_gain_h5 = 0;
	    		sharpness.peak_gain_v1 = 0;
	    		sharpness.peak_gain_v2 = 0;
	    		sharpness.peak_gain_v3 = 0x80;
	    		sharpness.peak_gain_v4 = 0x80;
	    		sharpness.peak_gain_v5 = 0x80;
	    		sharpness.peak_gain_v6 = 0x80;
	    		Log.d(DBTAG,"sharpness setting for MPEG !3D mode!");
        	}else{ //3d mode
	    		sharpness.peak_gain_h1 = 0xc0;
	    		sharpness.peak_gain_h2 = 0xc0;
	    		sharpness.peak_gain_h3 = 0xc0;
	    		sharpness.peak_gain_h4 = 0xc0;
	    		sharpness.peak_gain_h5 = 0xc0;
	    		sharpness.peak_gain_v1 = 0;
	    		sharpness.peak_gain_v2 = 0;
	    		sharpness.peak_gain_v3 = 0;
	    		sharpness.peak_gain_v4 = 0;
	    		sharpness.peak_gain_v5 = 0;
	    		sharpness.peak_gain_v6 = 0;
	    		Log.d(DBTAG,"sharpness setting for MPEG 3D mode!");
        	}
        }
        
		SetSharpness(sharpness);
	}

	private static final String TAG = "...vppINI...";

	public static void UiSetAudioMutePanel(int uiValue) {
        if (uiValue == 2) {//Power off backlight
            osdJNI.SetGpioCtrl("w b 6 1");
            osdJNI.SetGpioCtrl("w x 54 1");
        }
        else {//Power on backlight
            osdJNI.SetGpioCtrl("w b 6 0");
            osdJNI.SetGpioCtrl("w x 54 0");//open panel
        }
	}
	
	public static void StandbyAudioMutePanel(int uiValue) {
        if (uiValue == 2) //Power off backlight
            osdJNI.SetGpioCtrl("w b 6 1");
        else //Power on backlight
            osdJNI.SetGpioCtrl("w b 6 0");
	}
	
	public static void ResumeLastBLValue() {
	    Log.d(DBTAG, "ResumeLastBLValue: " + oldBLVal);
	    if (oldBLVal != -1) {
	        ChangeBackLight(oldBLVal, 60);
	    } else {
	        Log.d(DBTAG, "LastBackLightValue is null");
	    }
	}
	
	public static void DreamPanelSetBL(int regValue, int iHz) {// iHz:60/120
        if (regValue != oldBLVal) {
	        ChangeBackLight(regValue, iHz);
        }
	}
	
	private static void ChangeBackLight(int regValue, int iHz) {// iHz:60/120
            Log.d(DBTAG, "ChangeBackLightToValue: " + regValue + ", PreValue is: " + oldBLVal);
            oldBLVal = regValue;
            if (eepromJNI.GetCurPanel() == 2) {     //LG55E83
                if (regValue > 250 && regValue < 255) {
                    regValue = 250;
                }
            }
            if (iHz == 60) {
                SetBackLight(regValue);
            } else {
                SetBackLight((regValue + 256));
            }
        }

	public static int vppJNIGetVideoSetting(vdinJNI.SrcType srcType,
			int picMode, eepromJNI.VideoFunc videoFunc) {
		int value = 50;
		gParam = gParam.GetPicModeData(srcType, picMode);

		if (videoFunc == eepromJNI.VideoFunc.BRIGHTNESS)
			value = gParam.brightness;
		else if (videoFunc == eepromJNI.VideoFunc.CONTRAST)
			value = gParam.contrast;
		else if (videoFunc == eepromJNI.VideoFunc.HUE)
			value = gParam.hue;
		else if (videoFunc == eepromJNI.VideoFunc.COLOR)
			value = gParam.color;
		else if (videoFunc == eepromJNI.VideoFunc.SHARPNESS)
			value = gParam.sharpness;

		return value;
	}

	public static void UiSetPicMode(int picMode, int need_save_pic_para) {
		int val1, val2;
		SrcType srcType = vdinJNI.GetSrcType();

        eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.PICTURE_MODE, picMode);

		if (need_save_pic_para == 0)
			return;

		if (picMode == PictureMode.USER.ordinal()) {
			val1 = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.BRIGHTNESS);
			UiSetBrightness(val1);

			val1 = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.CONTRAST);	
			UiSetContrast(val1);

			int satVal = eepromJNI.LoadVideoSetting(srcType, eepromJNI.VideoFunc.COLOR);
			UiSetColor(satVal);
		} else {
			gParam = gParam.GetPicModeData(srcType, picMode);

			UiSetBrightness(gParam.brightness);
			UiSetContrast(gParam.contrast);
			UiSetColor(gParam.color);
		}
	}

	public static void UiSetScrMode(int scrmode) {
		int formatRatio = vdinJNI.GetFmtRatio();

		if(scrmode == 0xff){
			vppJNI.SetScaleParam(0, 0, (1920 - 1), (1080 - 1));
			Log.d(DBTAG,"set screen mode without save to eeprom: 16:9");
			return;
		}
		
        eepromJNI.SaveVideoSetting(vdinJNI.GetSrcType(), eepromJNI.VideoFunc.ASPECT_RAT, scrmode);

		if (scrmode == ScreenMode.MODE169.ordinal()) {
			if(vdinJNI.GetSrcType() != SrcType.MPEG){
				vppJNI.SetScaleParam(0, 0, (1920 - 1), (1080 - 1));
				Log.d(DBTAG,"ScreenMode::MODE169.");
			}else{
        		Log.d(DBTAG,"ScreenMode::MODE169.....SrcType.MPEG");
        		vppJNI.SetScaleParam(0, 0, 0, 0);
        		vppJNI.SetDisplayMode(1);
        	}
		} else if (scrmode == ScreenMode.MODE43.ordinal()) {
        	if(vdinJNI.GetSrcType() != SrcType.MPEG){
				vppJNI.SetScaleParam(240, 0, (1680 - 1), (1080 - 1));
				Log.d(DBTAG,"ScreenMode::MODE4:3");
        	}else{
        		Log.d(DBTAG,"ScreenMode::MODE43.....SrcType.MPEG");
                vppJNI.SetScaleParam(0, 0, 0, 0);
                vppJNI.SetDisplayMode(2);
			}
		} else if (scrmode == ScreenMode.CAPTION.ordinal()) {
			vppJNI.SetScaleParam(0, -86, (1920 - 1), (1084 - 1));
			Log.d(DBTAG,"ScreenMode::CAPTION");
		} else if (scrmode == ScreenMode.MOVIE.ordinal()) {
			vppJNI.SetScaleParam(0, -86, (1920 - 1), (1166 - 1));
			Log.d(DBTAG,"ScreenMode::MOVIE");
		} else if (scrmode == ScreenMode.PERSON.ordinal()) {
			vppJNI.SetScaleParam(0, -65, (1920 - 1), (1145 - 1));
			Log.d(DBTAG,"ScreenMode::PERSON");
		} else if (scrmode == ScreenMode.FULL.ordinal()) {
			vppJNI.SetScaleParam(0, 0, (1920 - 1), (1080 - 1));
			if(vdinJNI.GetSrcType() == SrcType.HDMI){
				if ( vdinJNI.GetSigFormat() == SigFormat.HDMI_1920x1080P_60Hz.ordinal()
				  || vdinJNI.GetSigFormat() == SigFormat.HDMI_1920x1080I_60Hz_FRAME_PACKING.ordinal()
				  || vdinJNI.GetSigFormat() == SigFormat.HDMI_1920x1080I_50Hz_FRAME_PACKING.ordinal()
				  || vdinJNI.GetSigFormat() == SigFormat.HDMI_1920x1080P_24Hz_FRAME_PACKING.ordinal()
				  || vdinJNI.GetSigFormat() == SigFormat.HDMI_1920x1080P_30Hz_FRAME_PACKING.ordinal()) {
					Log.d(DBTAG,"HDMI format without overscan::ScreenMode::FULL");
				 }else{
					Log.d(DBTAG,"HDMI format with overscan::ScreenMode::FULL");
					vppJNI.SetDisplayMode(4);
					vppJNI.SetNonLinearFactor(20);
				 }
			} else{
				Log.d(DBTAG,"not HDMI source::ScreenMode::FULL");
				vppJNI.SetDisplayMode(4);
				vppJNI.SetNonLinearFactor(20);
			}
		}

		if (IsBaseColorDemo == true) {
			UiSetViiSplitDemo();
		} else {
			;
		}
	}

	public static void UiSetBaseColor(int cmMode) {
		CmRegMap regmap = new CmRegMap();
		PanelType panelType = eepromJNI.LoadCurPanelType();
        SrcType srcType = vdinJNI.GetSrcType();

		eepromJNI.SaveMiscSetting(eepromJNI.MISCFunc.COLOR_MANAGEMENT, cmMode);
		IsBaseColorDemo = false;

		if (cmMode == ColorManageMode.OFF.ordinal()) {
        	regmap.SetOffData(panelType);
		} else if (cmMode == ColorManageMode.OPTIMIZE.ordinal()) {
        	regmap.SetOptimizeData(panelType);
		} else if (cmMode == ColorManageMode.ENHANCE.ordinal()) {
        	regmap.SetEnhanceData(panelType);
		}

		SetCMRegMap(regmap);
	}

	public static void UiSetViiSplitDemo() {
		CmRegMap regmap = new CmRegMap();
		int srcmode = 0;

		PanelType panelType = eepromJNI.LoadCurPanelType();
        srcmode = eepromJNI.LoadVideoSetting(vdinJNI.GetSrcType(), eepromJNI.VideoFunc.ASPECT_RAT);
        
        Log.d("BUG","current scr mode =" + srcmode);
        Log.d("BUG","current 3d status =" + vdinJNI.Get3DStatus());
        Log.d("BUG","current 3d mode =" + vdinJNI.Get3DMode());
        
		IsBaseColorDemo = true;

    	long demoMap_LG42E83[] = {
                0x8A58821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A3F8A14, 0x002803BB, 0x00003333, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A6C8A24, 0x00130911, 0x00006BCA, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8AA48A50, 0x00440BBB, 0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8ACC8221, 0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8AF48A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8AFF8A4C, 0x008536EE, 0x00000F66, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8AC68244, 0x00854800, 0x00000F66, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8493C024, 0x81000000
            };

    	long demoMap_LG47E83[] = {
    			0x8A58821E,	0x00525911,	0x000018FA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A3F8A14,	0x002803BB,	0x00003333,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A6C8A24,	0x00130911,	0x00006BCA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AA48A50,	0x00440BBB,	0x00001E1E,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8ACC8221,	0x00AA1488,	0x00000C0C,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AF48A24,	0x00632A22,	0x000014B0,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AFF8A4C,	0x008536EE,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AC68244,	0x00854800,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8493C024, 0x81000000
        };

    	switch(panelType){
	    	default:
	    	case LG42E83:
	    	case LG55E83:
	    	case LG42E85:
	    		if (srcmode == ScreenMode.MODE43.ordinal()) {
	    			Log.d("BUG","set cm demo in 4:3 display mode");
	    			demoMap_LG42E83[48] = 0x8492D024;
	    		} else {
					Log.d("BUG","set cm demo in 16:9 display mode");
	    			demoMap_LG42E83[48] = 0x8493C024;
	    		}
	    		regmap.SetData(demoMap_LG42E83);

	    		break;
	    	case LG47E83:
	    	case LG47E85:	
				if (srcmode == ScreenMode.MODE43.ordinal()) {
							Log.d("BUG","set cm demo in 4:3 display mode");
			    			demoMap_LG47E83[48] = 0x8492D024;
				} else {
							Log.d("BUG","set cm demo in 16:9 display mode");
			    			demoMap_LG47E83[48] = 0x8493C024;
			    		}
			    		regmap.SetData(demoMap_LG47E83);
		
			    		break;
				}

		SetCMRegMap(regmap);
	}

	public static void UiSetViiColorDemo(int demoMode) {
		CmRegMap regmap = new CmRegMap();

		if (demoMode == ColorDemoMode.ALLON.ordinal()) {
			long allonMap[] = {
                0x8A188A38, 0x004404E1, 0x00001E1E, 0x1433DC13, 0xCD33F50A,
                0x3333CE17, 0x82208A5D, 0x00230078, 0x00003A84, 0x0633CD17,
                0xE144FA02, 0x3433DC08, 0x0A3C005D, 0x004402E3, 0x00001e1e,
                0x1E22DC13, 0xCD22F50A, 0x22226B01, 0x024C0044, 0x004402E3,
                0x00001e1e, 0x0622CD17, 0xE133FA02, 0x3211F56E, 0x8A208250,
                0x008B2C7C, 0x00000ebc, 0x1433DC13, 0xCD33F50A, 0x3333CE17,
                0x8A208A44, 0x00B43DDC, 0x00000b61, 0x0633CD17, 0xE144FA02,
                0x3433DC08, 0x88208030, 0x007A0EFC, 0x000010C9, 0x1433DC13,
                0xCD33F50A, 0x3333CE17, 0x8A208844, 0x00391E70, 0x000023EE,
                0x0633CD17, 0xE144FA02, 0x3433DC08, 0x80000024, 0x00000000
			};
			regmap.SetData(allonMap);
		} else if (demoMode == ColorDemoMode.YOFF.ordinal()) {
			long yoffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x80ff807f, 0x00800800, 0x00001000, 0x1077f010,
                0xf077ff10, 0x7777ff10, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(yoffMap);
		} else if (demoMode == ColorDemoMode.COFF.ordinal()) {
			long coffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80ff807f, 0x00802800,
                0x00001000, 0x1077f010, 0xf077ff10, 0x7777ff10, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(coffMap);
		} else if (demoMode == ColorDemoMode.GOFF.ordinal()) {
			long goffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x80ff807f, 0x00801800, 0x00001000,
                0x1077f010, 0xf077ff10, 0x7777ff10, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(goffMap);
		} else if (demoMode == ColorDemoMode.MOFF.ordinal()) {
			long moffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x80ff807f, 0x00804800, 0x00001000, 0x1077f010, 0xf077ff10,
                0x7777ff10, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(moffMap);
		} else if (demoMode == ColorDemoMode.ROFF.ordinal()) {
			long roffMap[] = {
                0x80ff807f, 0x00805800, 0x00001000, 0x1077f010, 0xf077ff10,
                0x7777ff10, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(roffMap);
		} else if (demoMode == ColorDemoMode.BOFF.ordinal()) {
			long boffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80ff807f,
                0x00803800, 0x00001000, 0x1077f010, 0xf077ff10, 0x7777ff10,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(boffMap);
		} else if (demoMode == ColorDemoMode.RGBOFF.ordinal()) {
			long rgboffMap[] = {
                0x80ff807f, 0x00805800, 0x00001000, 0x1077f010, 0xf077ff10,
                0x7777ff10, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x80ff807f, 0x00801800, 0x00001000,
                0x1077f010, 0xf077ff10, 0x7777ff10, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80ff807f,
                0x00803800, 0x00001000, 0x1077f010, 0xf077ff10, 0x7777ff10,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(rgboffMap);
		} else if (demoMode == ColorDemoMode.YMCOFF.ordinal()) {
			long ymcoffMap[] = {
					0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x80ff807f, 0x00800800, 0x00001000, 0x1077f010,
                0xf077ff10, 0x7777ff10, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80ff807f, 0x00802800,
                0x00001000, 0x1077f010, 0xf077ff10, 0x7777ff10, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x80ff807f, 0x00804800, 0x00001000, 0x1077f010, 0xf077ff10,
                0x7777ff10, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(ymcoffMap);
		} else if (demoMode == ColorDemoMode.ALLOFF.ordinal()) {
			long alloffMap[] = {
                0x81ff8080, 0x00805800, 0x00001000, 0x0077ff00, 0xff77ff00,
                0x7777ff00, 0x80ff8080, 0x00800800, 0x00001000, 0x0077ff00,
                0xff77ff00, 0x7777ff00, 0x80ff8080, 0x00a01800, 0x00000ccd,
                0x0077ff00, 0xff77ff00, 0x7777ff00, 0x80ff8080, 0x00ff2800,
                0x00000800, 0x0077ff00, 0xff77ff00, 0x7777ff00, 0x80ff8080,
                0x00ff3c00, 0x00000800, 0x0077ff00, 0xff77ff00, 0x7777ff00,
                0x80ff8080, 0x00ff4c00, 0x00000800, 0x0077ff00, 0x00000000,
                0x7777ff00, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0xff77ff00, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x80700124, 0x00000000
			};
			regmap.SetData(alloffMap);
		}
		SetCMRegMap(regmap);
	}

	public static void UiSetNoiseRd(vdinJNI.SrcType srcType, int level) {

        eepromJNI.SaveVideoSetting(srcType, eepromJNI.VideoFunc.NOISE_RE, level);

		if (level == NoiseRd.OFF.ordinal()) {
			switch (srcType) {
			case AV:
				gParam.noiseRd = 5;
				break;
			case COMPONENT:
			case VGA:
			case HDMI:
                	gParam.noiseRd = 8;
                	break;
			case MPEG:
			default:
				gParam.noiseRd = 0;
				break;
			}
		} else if (level == NoiseRd.LOW.ordinal()) {
			switch (srcType) {
			case AV:
				gParam.noiseRd = 7;
				break;
			case COMPONENT:
				gParam.noiseRd = 7;
				break;
			case VGA:
				gParam.noiseRd = 0;
				break;
			case HDMI:
                    gParam.noiseRd = 10;
				break;
			case MPEG:
				break;
			default:
				gParam.noiseRd = 0;
				break;
			}
		} else if (level == NoiseRd.MID.ordinal()) {
			switch (srcType) {
			case AV:
				gParam.noiseRd = 9;
				break;
			case COMPONENT:
				gParam.noiseRd = 14;
				break;
			case VGA:
				gParam.noiseRd = 0;
				break;
			case HDMI:
                    gParam.noiseRd = 12;
				break;
			case MPEG:
				break;
			default:
				gParam.noiseRd = 0;
				break;
			}
		} else if (level == NoiseRd.HIGH.ordinal()) {
			switch (srcType) {
			case AV:
				gParam.noiseRd = 14;
				break;
			case COMPONENT:
				gParam.noiseRd = 21;
				break;
			case VGA:
				gParam.noiseRd = 0;
				break;
			case HDMI:
                    gParam.noiseRd = 13;  //12
				break;
			case MPEG:
				break;
			default:
				gParam.noiseRd = 0;
				break;
			}
		} else if (level == NoiseRd.AUTO.ordinal()) {
			switch (srcType) {
			case AV:
				gParam.noiseRd = 9;
				break;
			case COMPONENT:
				gParam.noiseRd = 14;
				break;
			case VGA:
				gParam.noiseRd = 0;
				break;
			case HDMI:
                    gParam.noiseRd = 12;
				break;
			case MPEG:
				break;
			default:
				gParam.noiseRd = 0;
				break;
			}
		}

		SetNoiseReduction(gParam.noiseRd);
		Log.d(DBTAG, "set " + srcType.toString() + " NR value = "
				+ gParam.noiseRd);
	}

    public static void UiSetBlackExtension(int en, int start, int slope1, int midpt, int slope2) {
        BlackExtension gBlackExtension = new BlackExtension();

        gBlackExtension.en = en;
        gBlackExtension.start = start;
        gBlackExtension.slope1 = slope1;
        gBlackExtension.midpt = midpt;
        gBlackExtension.slope2 = slope2;

        SetBlackExtension(gBlackExtension);
    }

    public static void UiSetDNLP(int onOff, int time, int rate, int black, int white) {
		Dnlp gDNLP = new Dnlp();

		if (onOff == 1)
			gDNLP.en = 1;
		else
			gDNLP.en = 0;

        gDNLP.rt = time;
        gDNLP.rl = rate;
        gDNLP.black = black;
        gDNLP.white = white;

		SetDNLP(gDNLP);
	}

	public static void DisableVideoLayer(int value) {

		if (vdinJNI.GetSrcType() == SrcType.MPEG) {
			Log.d("TV JAVA VDIN", "disable video layer = 1");
			SetVideoDisable(1);
		}

		SetVideoDisable(value);
	}

	public static void SetSSC(SSCRange range, int lowrange, int cycle,
			boolean onoff) {
		int amp = 1;
		int value0;
		int cysreg = 0;
		String cmdlowrange;

		switch (range) {
		case RATIO_1:
			amp = 1;
			break;
		case RATIO_1D5:
			amp = 2;
			break;
		case RATIO_2:
			amp = 4;
			break;
		case RATIO_3D5:
			amp = 6;
			break;
		case RATIO_4D5:
			amp = 8;
			break;
		default:
			amp = 1;
			break;
		}
		if (onoff == false) {
			lowrange = 0;
		}
		switch (lowrange) {
		case 0:// /74M
			cmdlowrange = new String("wc 0x105c 0x641");
			break;
		case 1:// /73M
			cmdlowrange = new String("wc 0x105c 0x640");
			break;
		case 2:// /72M
			cmdlowrange = new String("wc 0x105c 0x63f");
			break;
		case 3:// /71M
			cmdlowrange = new String("wc 0x105c 0x63e");
			break;
		default:
			cmdlowrange = new String("wc 0x105c 0x641");
			break;
		}
		if ((cycle < 15) && (cycle >= 0))
			cysreg = cycle;
		else
			cysreg = 0;

		// 0x104f --> 0x65e31ff
		// 0x1058 --> 0x9649a941
		// value0 = 0;

		value0 = 0x65e3100;
		value0 = value0 | (amp << 4);
		value0 = value0 | (cysreg << 0);
		// value1 = value1 +((0x9649a941L) | (1<<9)); //enable

		String cmdtemp = Integer.toHexString(value0);
		String cmd0 = "wc 0x104f " + cmdtemp;
		String cmd1 = "wc 0x1058 0x9649ab41";
		String cmd2 = "wc 0x1058 0x9649a941";
		if (onoff) {
			osdJNI.DebugCmd(cmd0);
			osdJNI.DebugCmd(cmd1);
			Log.d(DBTAG, "SSC cmd0 :" + cmd0);
			Log.d(DBTAG, "SSC cmd1 :" + cmd1);
		} else {
			osdJNI.DebugCmd(cmd2);
			Log.d(DBTAG, "SSC cmd0 :" + cmd2);
		}
		osdJNI.DebugCmd(cmdlowrange);

	}

	public static void SetStandbyKeyMode(boolean SetSSC) {
		if (SetSSC) {
			try {
				// echo P > /sys/class/simkey/keyset
				// chmod 0777 /sys/class/simkey/keyset
                BufferedWriter writer = new BufferedWriter(new FileWriter("/sys/class/simkey/keyset"), 2);
				try {
					writer.write("FCS");// //KEY_POWER->KEY_OSD
				} finally {
					writer.close();
				}
				Log.e(TAG, "IO Exception when write: FCS"
						+ "/sys/class/simkey/keyset ok");
			} catch (IOException e) {
				Log.e(TAG, "IO Exception when write: "
						+ "/sys/class/simkey/keyset", e);
			}
		} else {
			try {
				// echo P > /sys/class/simkey/keyset
				// chmod 0777 /sys/class/simkey/keyset
                BufferedWriter writer = new BufferedWriter(new FileWriter("/sys/class/simkey/keyset"), 2);
				try {
					writer.write("FCR");// //power off stand by
				} finally {
					writer.close();
				}
				Log.e(TAG, "IO Exception when write: FCR"
						+ "/sys/class/simkey/keyset ok");
			} catch (IOException e) {
				Log.e(TAG, "IO Exception when write: "
						+ "/sys/class/simkey/keyset", e);
			}
		}
	}

	public static class RGBogo implements Cloneable {
		public int en = 0;
		public int r_pre_offset = 0;
		public int g_pre_offset = 0;
		public int b_pre_offset = 0;
		public int r_gain = 1024;
		public int g_gain = 1024;
		public int b_gain = 1024;
		public int r_post_offset = 0;
		public int g_post_offset = 0;
		public int b_post_offset = 0;

		public RGBogo() {
		}

		public Object clone() {
			RGBogo obj = null;
			try {
				obj = (RGBogo) super.clone();
			} catch (CloneNotSupportedException e) {
				e.printStackTrace();
			}
			return obj;
		}

		public int[] ToByteArrary() {
			int[] retbuf = new int[19];

			retbuf[0] = this.en;

			retbuf[1] = this.r_pre_offset & 0xff;
			retbuf[2] = this.r_pre_offset >> 8;
			retbuf[3] = this.g_pre_offset & 0xff;
			retbuf[4] = this.g_pre_offset >> 8;
			retbuf[5] = this.b_pre_offset & 0xff;
			retbuf[6] = this.b_pre_offset >> 8;

			retbuf[7] = this.r_gain & 0xff;
			retbuf[8] = this.r_gain >> 8;
			retbuf[9] = this.g_gain & 0xff;
			retbuf[10] = this.g_gain >> 8;
			retbuf[11] = this.b_gain & 0xff;
			retbuf[12] = this.b_gain >> 8;

			retbuf[13] = this.r_post_offset & 0xff;
			retbuf[14] = this.r_post_offset >> 8;
			retbuf[15] = this.g_post_offset & 0xff;
			retbuf[16] = this.g_post_offset >> 8;
			retbuf[17] = this.b_post_offset & 0xff;
			retbuf[18] = this.b_post_offset >> 8;

			return retbuf;
		}

		public RGBogo FromByteArrary(int buf[]) {
			// for(int j=0; j<19;j++){
			// Log.d(DBTAG,"buf-"+j+" = "+buf[j]);
			// }
			RGBogo rgbogo = new RGBogo();

			rgbogo.en = buf[0];

			rgbogo.r_pre_offset = buf[2] << 8 | buf[1];
			rgbogo.g_pre_offset = buf[4] << 8 | buf[3];
			rgbogo.b_pre_offset = buf[6] << 8 | buf[5];

			rgbogo.r_gain = buf[8] << 8 | buf[7];
			rgbogo.g_gain = buf[10] << 8 | buf[9];
			rgbogo.b_gain = buf[12] << 8 | buf[11];

			rgbogo.r_post_offset = buf[14] << 8 | buf[13];
			rgbogo.g_post_offset = buf[16] << 8 | buf[15];
			rgbogo.b_post_offset = buf[18] << 8 | buf[17];

			if (rgbogo.r_pre_offset > 1023)
				rgbogo.r_pre_offset = rgbogo.r_pre_offset - 0x10000;

			if (rgbogo.g_pre_offset > 1023)
				rgbogo.g_pre_offset = rgbogo.g_pre_offset - 0x10000;

			if (rgbogo.b_pre_offset > 1023)
				rgbogo.b_pre_offset = rgbogo.b_pre_offset - 0x10000;

			if (rgbogo.r_post_offset > 1023)
				rgbogo.r_post_offset = rgbogo.r_post_offset - 0x10000;

			if (rgbogo.g_post_offset > 1023)
				rgbogo.g_post_offset = rgbogo.g_post_offset - 0x10000;

			if (rgbogo.b_post_offset > 1023)
				rgbogo.b_post_offset = rgbogo.b_post_offset - 0x10000;

			return rgbogo;
		}

		public void DbPrint() {
			final String DBTAG = "VPP";

			Log.d(DBTAG, "RGB_OGO.en = " + this.en);

			Log.d(DBTAG, "RGB_OGO.r_pre_offset = " + this.r_pre_offset);
			Log.d(DBTAG, "RGB_OGO.g_pre_offset = " + this.g_pre_offset);
			Log.d(DBTAG, "RGB_OGO.b_pre_offset = " + this.b_pre_offset);

			Log.d(DBTAG, "RGB_OGO.r_gain = " + this.r_gain);
			Log.d(DBTAG, "RGB_OGO.g_gain = " + this.g_gain);
			Log.d(DBTAG, "RGB_OGO.b_gain = " + this.b_gain);

			Log.d(DBTAG, "RGB_OGO.r_post_offset = " + this.r_post_offset);
			Log.d(DBTAG, "RGB_OGO.g_post_offset = " + this.g_post_offset);
			Log.d(DBTAG, "RGB_OGO.b_post_offset = " + this.b_post_offset);
		}

	}

	/***************************************************
	 * // load liberary & JNI methods
	 ***************************************************/
	static {
		System.loadLibrary("vpp_api");
	}

	static native int OpenVPPModule();

	static native void CloseVPPModule();

	static native int IsVPPModuleOpen();

	static native int SetBlackExtension(BlackExtension BlackExtParam);

	static native int SetDNLP(Dnlp DNLPParam);

	static native int SetColorCoring(ColorCoring ChromaCoringParam);

	static native int SetBlueEnh(BlueEnhancement BlueEnhParam);

	static native int SetVEDemo(VeDemo VEDemoParam);

	static native int SetSharpness(Sharpness SharpnessMap);

	static native int SetVERegMap(VeRegMap VERegisterMap);

	static native int SetCMRegMap(CmRegMap CMRegisterMap);

	static native int SetCMRegion(ColorRegion CMRegion);

	static native int SetCMTopLayer(CmConfig CMTopLayer);

	static native int SetCMDemo(CmDemo CMDemo);

	static native int SetNoiseReduction(int value);

	static native int SetRedGammaTbl(int[] red);

	static native int SetGreenGammaTbl(int[] green);

	static native int SetBlueGammaTbl(int[] blue);

	static native int SetGammaOnOff(int onOff);

	static native int SetColorTemp(int colorTemp);

	static native int SetBrightness(int value);

	static native int SetContrast(int value);

	static native int SetSaturationHue(int satValue, int hueValue);

	public static native int SetScreenColor(int isOn, int y, int u, int v);

	public static native int SetDisplayMode(int displaymode);

	public static native int SetNonLinearFactor(int nonLinearFactor);

	public static native int SetScaleParam(int hstart, int vstart, int hend,
			int vend);

	public static native int SetDeinterlaceMode(int value);

	public static native int SetVideoDisable(int value);

	public static native int SetRGBogo(RGBogo rgbogo);

	public static native int GetRGBogo(RGBogo rgbogo);
	
	public static native int SetBackLight(int value);

    public static native int SetSyncEnable(long enable);
}

/*********************************************************************
 * // important class(structure) of ve
 *********************************************************************/
class BlackExtension {
	int en = 1;
    int start = 0x30;
    int slope1 = 0x24;
    int midpt = 0x18;
    int slope2 = 0x40;

	public BlackExtension() {

	}
}

class Sharpness {
	public int en = 0x00;
	public int peak_gain_h1 = 0x00;
	public int peak_gain_h2 = 0x00;
	public int peak_gain_h3 = 0x00;
	public int peak_gain_h4 = 0x00;
	public int peak_gain_h5 = 0x00;
	public int peak_gain_v1 = 0x00;
	public int peak_gain_v2 = 0x00;
	public int peak_gain_v3 = 0x00;
	public int peak_gain_v4 = 0x00;
	public int peak_gain_v5 = 0x00;
	public int peak_gain_v6 = 0x00;
	public int hpeak_slope1 = 0x00;
	public int hpeak_slope2 = 0x00;
	public int hpeak_thr1 = 0x00;
	public int hpeak_thr2 = 0x00;
	public int hpeak_nlp_cor_thr = 0x00;
	public int hpeak_nlp_gain_pos = 0x80;
	public int hpeak_nlp_gain_neg = 0x80;
	public int vpeak_slope1 = 0x00;
	public int vpeak_slope2 = 0x00;
	public int vpeak_thr1 = 0x00;
	public int vpeak_thr2 = 0x00;
	public int vpeak_nlp_cor_thr = 0x00;
	public int vpeak_nlp_gain_pos = 0x80;
	public int vpeak_nlp_gain_neg = 0x80;
	public int speak_slope1 = 0x00;
	public int speak_slope2 = 0x00;
	public int speak_thr1 = 0x00;
	public int speak_thr2 = 0x00;
	public int speak_nlp_cor_thr = 0x00;
	public int speak_nlp_gain_pos = 0x80;
	public int speak_nlp_gain_neg = 0x80;
	public int peak_cor_gain = 0x01;
	public int peak_cor_thr_l = 0x1a;
	public int peak_cor_thr_h = 0x31;
	public int vlti_step = 0x00;
	public int vlti_step2 = 0x01;
	public int vlti_thr = 0x09;
	public int vlti_gain_pos = 0x00;
	public int vlti_gain_neg = 0x00;
	public int vlti_blend_factor = 0x00;
	public int hlti_step = 0x00;
	public int hlti_thr = 0x78;
	public int hlti_gain_pos = 0x00;
	public int hlti_gain_neg = 0x00;
	public int hlti_blend_factor = 0x00;
	public int vlimit_coef_h = 0x06;
	public int vlimit_coef_l = 0x06;
	public int hlimit_coef_h = 0x06;
	public int hlimit_coef_l = 0x06;
	public int cti_444_422_en = 0x00;
	public int cti_422_444_en = 0x00;
	public int cti_blend_factor = 0x00;
	public int vcti_buf_en = 0x01;
	public int vcti_buf_mode_c5l = 0x00;
	public int vcti_filter = 0x00;
	public int hcti_step = 0x04;
	public int hcti_step2 = 0x06;
    public int hcti_thr = 0x00;
	public int hcti_gain = 0x00;
	public int hcti_mode_median = 0x00;

	public Sharpness() {

	}
}

class Dnlp {
	public int en;
	public int rt;
	public int rl;
    public int black;
    public int white;

	enum time {
        RT_16MS,
        RT_32MS,
        RT_64MS,
        RT_128MS,
        RT_256MS,
        RT_512MS,
        RT_1SEC,
        RT_2SEC,
        RT_4SEC,
        RT_8SEC,
        RT_16SEC,
        RT_32SEC,
        RT_1MIN,
        RT_2MIN,
        RT_4MIN,
        RT_8MIN,
        RT_16MIN,
	};

	enum rate {
        R01,        // max_contrast = 1.0625x
        R02,        // max_contrast = 1.1250x
        R03,        // max_contrast = 1.1875x
        R04,        // max_contrast = 1.2500x
        R05,        // max_contrast = 1.3125x
        R06,        // max_contrast = 1.3750x
        R07,        // max_contrast = 1.4375x
        R08,        // max_contrast = 1.5000x
        R09,        // max_contrast = 1.5625x
        R10,        // max_contrast = 1.6250x
        R11,        // max_contrast = 1.6875x
        R12,        // max_contrast = 1.7500x
        R13,        // max_contrast = 1.8125x
        R14,        // max_contrast = 1.8750x
        R15,        // max_contrast = 1.9375x
        R16,        // max_contrast = 2.0000x
    };

    enum ext {
        EXT0,       // weak
        EXT1,
        EXT2,
        EXT3,
        EXT4,
        EXT5,
        EXT6,
        EXT7,
        EXT8,
        EXT9,
        EXT10,
        EXT11,
        EXT12,
        EXT13,
        EXT14,
        EXT15,
        EXT16,     // strong
	};

	public Dnlp() {

	}
}

class ColorCoring {
	public int en;
	public int slope;
	public int thr;

	public ColorCoring() {

	}
}

class BlueEnhancement {
	public int en;
	public int cb_inc;
	public int cr_inc;
	public int gain_cr;
	public int gain_cb4cr;
	public int luma_h;
	public int err_crp;
	public int err_crn;
	public int err_cbp;
	public int err_cbn;

	public BlueEnhancement() {

	}

	void SetData(int benhCfg[]) {
		if (benhCfg != null) {
			this.cb_inc = benhCfg[0];
			this.cr_inc = benhCfg[1];
			this.gain_cr = benhCfg[2];
			this.gain_cb4cr = benhCfg[3];
			this.luma_h = benhCfg[4];
			this.err_crp = benhCfg[5];
			this.err_crn = benhCfg[6];
			this.err_cbp = benhCfg[7];
			this.err_cbn = benhCfg[8];
		}
	}
}

class VeDemo {
	enum DemoPosition {
		TOP, BOTTOM, LEFT, RIGHT,
	}

	DemoPosition position;

	int enBlackeExt = 0;
	int enDnlp = 0;
	int enSharpness = 0;
	int enColorCor = 0;
	int enBlueEnh = 0;
	int pos = position.LEFT.ordinal();
	long wid = 960;
	/** bar setting S */
	int en = 1;
	int barwid = 2;
	int cr = 0x08;
	int cb = 0x00;
	int y = 0x00;

	public VeDemo() {

	}

	void setArea(DemoPosition pos, long width) {
		this.pos = pos.ordinal();
		this.wid = width;
	}

	void setBarColor(int Cb, int Cr, int Y) {
		this.cr = cr;
		this.cb = cb;
		this.y = y;
	}

	void setBarWidth(int width) {
		this.barwid = width;
	}

	public void SetVEDemo(boolean isTurnOn) {
		if (isTurnOn == true)
			this.en = 1;
		else
			this.en = 0;
		this.enSharpness = 1;
		this.setArea(this.position.LEFT, 500);
		this.setBarWidth(1);
		this.setBarColor(0, 0x7f, 0);
	}
}

class VeRegMap {
    public long reg[] = {
        0x78303040, 0x08060402, 0x100e0c0a, 0x1a171412, 0x2824201d, 0x3834302c,
        0x4b45403c, 0x605b5550, 0x80787068, 0xa0989088, 0xb8b2aca6, 0xc8c4c0bc,
        0xd4d2cecb, 0xdad8d7d6, 0xe2e0dedc, 0xf0ece8e4, 0xfffcf8f4, 0x14410844,
        0xc4411044, 0x20800208, 0x00002020, 0x00208008, 0x00002020, 0x00002020,
        0x04088888, 0x60780460, 0x60880480, 0xfb480010, 0xe0100860, 0x81008100,
        0x42004200, 0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x8f000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000,
    };

	public VeRegMap() {

	}

	public void SetData(long inputReg[]) {
		for (int i = 0; i < 43; i++) {
			if (inputReg[i] >= 0x80000000) {
				inputReg[i] = inputReg[i] << 32;
				inputReg[i] = inputReg[i] >>> 32;
			}
			this.reg[i] = inputReg[i];
		}
	}
}

/******************************************************************
 * 
 *******************************************************************/
class ColorRegion {
	public int region_idx = 0x00;
	public int sym_en = 0x0;
	public int sat_en = 0x00;
	public int sat_central_en = 0x00;
	public int sat_shape = 0x00;
	public int sat_gain = 0x00;
	public int sat_inc = 0x00;
	public int sat_lum_h_slope = 0x00;
	public int sat_lum_l_slope = 0x00;
	public int sat_lum_h = 0x00;
	public int sat_lum_l = 0x00;
	public int sat_sat_h_slope = 0x00;
	public int sat_sat_l_slope = 0x00;
	public int sat_sat_h = 0x00;
	public int sat_sat_l = 0x00;
	public int hue_en = 0x00;
	public int hue_central_en = 0x00;
	public int hue_shape = 0x00;
	public int hue_gain = 0x00;
	public int hue_clockwise = 0x00;
	public int hue_shf_ran = 0x00;
	public int hue_shf_sta = 0x00;
	public int hue_lum_h_slope = 0x00;
	public int hue_lum_l_slope = 0x00;
	public int hue_lum_h = 0x00;
	public int hue_lum_l = 0x00;
	public int hue_sat_h_slope = 0x00;
	public int hue_sat_l_slope = 0x00;
	public int hue_sat_h = 0x00;
	public int hue_sat_l = 0x00;

	public enum RegionIdx {
		IDX_0, IDX_1, IDX_2, IDX_3, IDX_4, IDX_5, IDX_6, IDX_7,
	}

	public ColorRegion(int colIdx) {
		this.region_idx = colIdx;
	}

	public void SetHueGain(boolean isClockWise, int value) {
		this.hue_gain = value; // 0~0x7f
		if (isClockWise == true)
			this.hue_clockwise = 1;
		else
			this.hue_clockwise = 0;
	}

	public void SetSatGain(boolean isAdd, int value) {
		this.sat_gain = value; // 0~0xff
		if (isAdd == true)
			this.sat_inc = 1;
		else
			this.sat_inc = 0;
	}

	public void SetData(int symEn, int satCfg[], int hueCfg[]) {
		// if(colorSel !=-1) this.region_idx = colorSel;
		if (symEn != -1)
			this.sym_en = 1;// symEn;
		if (satCfg != null) {
			// sat - top
			this.sat_en = 1;// satCfg[0];
			this.sat_central_en = satCfg[1];
			this.sat_shape = satCfg[2];// public cm_sat_shape_e sat_shape;
			this.sat_gain = 250;// satCfg[3];
			this.sat_inc = 0;// satCfg[4];
			// sat - lum
			this.sat_lum_h_slope = satCfg[5];
			this.sat_lum_l_slope = satCfg[6];
			this.sat_lum_h = satCfg[7];
			this.sat_lum_l = satCfg[8];
			// sat - sat
			this.sat_sat_h_slope = satCfg[9];
			this.sat_sat_l_slope = satCfg[10];
			this.sat_sat_h = satCfg[11];
			this.sat_sat_l = satCfg[12];
		}
		if (hueCfg != null) {
			// hue - top
			this.hue_en = 1;// hueCfg[0];
			this.hue_central_en = hueCfg[1];
			this.hue_shape = hueCfg[2];// cm_hue_shape_e hue_shape;
			this.hue_gain = 124;// hueCfg[3];
			this.hue_clockwise = 0;// hueCfg[4];
			this.hue_shf_ran = hueCfg[5];
			this.hue_shf_sta = hueCfg[6];
			// hue - lum
			this.hue_lum_h_slope = hueCfg[7];
			this.hue_lum_l_slope = hueCfg[8];
			this.hue_lum_h = hueCfg[9];
			this.hue_lum_l = hueCfg[10];
			// hue - sat
			this.hue_sat_h_slope = hueCfg[11];
			this.hue_sat_l_slope = hueCfg[12];
			this.hue_sat_h = hueCfg[13];
			this.hue_sat_l = hueCfg[14];
		}
	};
}

class CmRegMap {
	final String DBTAG = "VPP_JNI";
    public long reg[] = {
        0x8A008A00, 0x007F5C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x007F1C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x007F3C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x003F2C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x003F4C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x003F0C00, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x8A008A00, 0x001D0A22, 0x00002082, 0x1033E010, 0xE033F50A, 0x3333E010,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x80000024, 0x80000000,
    };

    class Off{
    	long offMap_LG42E83[] = {
	            0x8A00821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
	            0x3333E010, 0x8A008A14, 0x002803BB, 0x00003333, 0x1033E010,
	            0xE033F50A, 0x3333E010, 0x8A008A24, 0x00130911, 0x00006BCA,
	            0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008A50, 0x00440BBB,
	            0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008221,
	            0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
	            0x8A008A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
	            0x3333E010, 0x8A008A4C, 0x008536EE, 0x00000F66, 0x1033E010,
	            0xE033F50A, 0x3333E010, 0x8A008244, 0x00854800, 0x00000F66,
	            0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
        };
    	long offMap_LG47E83[] = {
    			0x8A00821E,	0x00525911,	0x000018FA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008A14,	0x002803BB,	0x00003333,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008A24,	0x00130911,	0x00006BCA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008A50,	0x00440BBB,	0x00001E1E,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008221,	0x00AA1488,	0x00000C0C,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008A24,	0x00632A22,	0x000014B0,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008A4C,	0x008536EE,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A008244,	0x00854800,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	    			                                                    
    			0x80000024, 0x80001E1E
        };  
    	long offMap_LG55E83[] = {
                0x8A00821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8A008A14, 0x002803BB, 0x00003333, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8A008A24, 0x00130911, 0x00006BCA,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008A50, 0x00440BBB,
                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008221,
                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A008A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8A008A4C, 0x008536EE, 0x00000F66, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8A008244, 0x00854800, 0x00000F66,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
            };
//		long offMap_LG42E85[] = {
//                0x8A00821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A008A14, 0x002803BB, 0x00003333, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A008A24, 0x00130911, 0x00006BCA,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008A50, 0x00440BBB,
//                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008221,
//                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A008A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A008A4C, 0x008536EE, 0x00000F66, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A008244, 0x00854800, 0x00000F66,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
//            };
//		long offMap_LG47E85[] = {
//                0x8A00821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A008A14, 0x002803BB, 0x00003333, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A008A24, 0x00130911, 0x00006BCA,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008A50, 0x00440BBB,
//                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8A008221,
//                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A008A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A008A4C, 0x008536EE, 0x00000F66, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A008244, 0x00854800, 0x00000F66,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
//            };
    }
    
    class Optimize{
        /************************************************
         * 			for HDMI source
         ************************************************/
    	long OptiMapHdmi_LG42E83[] = {
				0x8A168A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A198A31,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A208A40,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A068205,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A248264,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,
				0x80000024, 0x80001E1E,
		};
    	long OptiMapHdmi_LG47E83[] = {
    			0x8A168A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A198A32,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A208A40,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A068205,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A248264,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,
				0x80000024, 0x80001E1E,
		};
    	long OptiMapHdmi_LG55E83[] = {
    			0x8A098A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A088A14,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A208A40,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A068205,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A388240,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x80000024, 0x80001E1E,
		};
//    	long OptiMapHdmi_LG42E85[] = {
//				0x8A168A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A198A31,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A208A40,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A068205,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A248264,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,
//				0x80000024, 0x80001E1E,
//		};
//    	long OptiMapHdmi_LG47E85[] = {
//				0x8A168A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A198A31,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A208A40,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A068205,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
//				0x8A248264,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,
//				0x80000024, 0x80001E1E,
//		};
        /************************************************
         * 			for not HDMI source
         ************************************************/
		long OptiMap_LG42E83[] = {
                0x8A168A06, 0x002A5E22, 0x000030C3, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A108A20, 0x003D03BB, 0x00002193, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A208A40, 0x003B0BBB, 0x000022B6, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A40820E, 0x00BD1377, 0x00000AD6, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A068205, 0x00612B77, 0x0000151D, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A408A38, 0x00663844, 0x00001414, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A288239, 0x00484555, 0x00001C72, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A248264, 0x00794EAA, 0x000010ED, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x80000024, 0x80001E1E,
        };
		long OptiMap_LG47E83[] = {
                0x8A168A06, 0x002A5E22, 0x000030C3, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A108A20, 0x003D03BB, 0x00002193, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A208A40, 0x003B0BBB, 0x000022B6, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A40820E, 0x00BD1377, 0x00000AD6, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A068205, 0x00612B77, 0x0000151D, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8A408A38, 0x00663844, 0x00001414, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A288239, 0x00484555, 0x00001C72, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x8A248264, 0x00794EAA, 0x000010ED, 0x1033E010, 0xE033F50A, 0x3333E010, 
                0x80000024, 0x80001E1E,
        };
		long OptiMap_LG55E83[] = {
				0x8A048A06,	0x002A5E22,	0x000030C3,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A078A14,	0x003D03BB,	0x00002193,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A098A24,	0x003B0BBB,	0x000022B6,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A40820E,	0x00BD1377,	0x00000AD6,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A098A18,	0x00612B77,	0x0000151D,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A408A38,	0x00663844,	0x00001414,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A288239,	0x00484555,	0x00001C72,	0x1033E010,	0xE033F50A,	0x3333E010,	
				0x8A388240,	0x00794EAA,	0x000010ED,	0x1033E010,	0xE033F50A,	0x3333E010,	 
                0x80000024, 0x80001E1E,
        };
//		long OptiMap_LG42E85[] = {
//                0x8A168A06, 0x002A5E22, 0x000030C3, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A108A20, 0x003D03BB, 0x00002193, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A208A40, 0x003B0BBB, 0x000022B6, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A40820E, 0x00BD1377, 0x00000AD6, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A068205, 0x00612B77, 0x0000151D, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A408A38, 0x00663844, 0x00001414, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A288239, 0x00484555, 0x00001C72, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A248264, 0x00794EAA, 0x000010ED, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x80000024, 0x80001E1E,
//        };
//		long OptiMap_LG47E85[] = {
//                0x8A168A06, 0x002A5E22, 0x000030C3, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A108A20, 0x003D03BB, 0x00002193, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A208A40, 0x003B0BBB, 0x000022B6, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A40820E, 0x00BD1377, 0x00000AD6, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A068205, 0x00612B77, 0x0000151D, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8A408A38, 0x00663844, 0x00001414, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A288239, 0x00484555, 0x00001C72, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x8A248264, 0x00794EAA, 0x000010ED, 0x1033E010, 0xE033F50A, 0x3333E010, 
//                0x80000024, 0x80001E1E,
//        };
    }
    
    class Enhance{
    	long ehanceMap_LG42E83[] = {
                0x8A54821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8A3C8A14, 0x002803BB, 0x00003333, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8A688A24, 0x00130911, 0x00006BCA,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x8AA08A50, 0x00440BBB,
                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8AC88221,
                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8AF08A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8AFF8A4C, 0x008536EE, 0x00000F66, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8AC28244, 0x00854800, 0x00000F66,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
            };
    	long ehanceMap_LG47E83[] = {
    			0x8A54821E,	0x00525911,	0x000018FA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A3C8A14,	0x002803BB,	0x00003333,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8A688A24,	0x00130911,	0x00006BCA,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AA08A50,	0x00440BBB,	0x00001E1E,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AC88221,	0x00AA1488,	0x00000C0C,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AF08A24,	0x00632A22,	0x000014B0,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AFF8A4C,	0x008536EE,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	
    			0x8AC28244,	0x00854800,	0x00000F66,	0x1033E010,	0xE033F50A,	0x3333E010,	
                0x80000024, 0x80001E1E
            };
    	long ehanceMap_LG55E83[] = {
                0x8A54821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8A3C8A14, 0x002803BB, 0x00003333, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8A688A24, 0x00130911, 0x00006BCA,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x8AA08A50, 0x00440BBB,
                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8AC88221,
                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
                0x8AF08A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
                0x3333E010, 0x8AFF8A4C, 0x008536EE, 0x00000F66, 0x1033E010,
                0xE033F50A, 0x3333E010, 0x8AC28244, 0x00854800, 0x00000F66,
                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
            };
//    	long ehanceMap_LG42E85[] = {
//                0x8A54821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A3C8A14, 0x002803BB, 0x00003333, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A688A24, 0x00130911, 0x00006BCA,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x8AA08A50, 0x00440BBB,
//                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8AC88221,
//                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8AF08A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8AFF8A4C, 0x008536EE, 0x00000F66, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8AC28244, 0x00854800, 0x00000F66,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
//            };
//    	long ehanceMap_LG47E85[] = {
//                0x8A54821E, 0x00525911, 0x000018FA, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8A3C8A14, 0x002803BB, 0x00003333, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8A688A24, 0x00130911, 0x00006BCA,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x8AA08A50, 0x00440BBB,
//                0x00001E1E, 0x1033E010, 0xE033F50A, 0x3333E010, 0x8AC88221,
//                0x00AA1488, 0x00000C0C, 0x1033E010, 0xE033F50A, 0x3333E010,
//                0x8AF08A24, 0x00632A22, 0x000014B0, 0x1033E010, 0xE033F50A,
//                0x3333E010, 0x8AFF8A4C, 0x008536EE, 0x00000F66, 0x1033E010,
//                0xE033F50A, 0x3333E010, 0x8AC28244, 0x00854800, 0x00000F66,
//                0x1033E010, 0xE033F50A, 0x3333E010, 0x80000024, 0x80001E1E
//            };
    }
    
    public void SetOffData(PanelType panelType){
    	Off cmOff = new Off();
    	switch(panelType){
    		default:
    		case LG42E83:
    		case LG42E85:
    			Log.d(DBTAG,"set color management OFF(offMap_LG42E83/LG42E85)");
    			SetData(cmOff.offMap_LG42E83);
    			break;
    		case LG47E83:
    		case LG47E85:
    			Log.d(DBTAG,"set color management OFF(offMap_LG47E83/LG47E85)");
    			SetData(cmOff.offMap_LG47E83);
    			break;
    		case LG55E83:
    			Log.d(DBTAG,"set color management OFF(offMap_LG55E83)");
    			SetData(cmOff.offMap_LG55E83);
    			break;
//    		case LG42E85:
//    			Log.d(DBTAG,"set color management OFF(offMap_LG42E85)");
//    			SetData(cmOff.offMap_LG42E85);
//    			break;
//    		case LG47E85:
//    			Log.d(DBTAG,"set color management OFF(offMap_LG47E85)");
//    			SetData(cmOff.offMap_LG47E85);
//    			break;
    	}
    }
    
    public void SetOptimizeData(PanelType panelType){
    	Optimize cmOpt = new Optimize();
    	
    	if( vdinJNI.GetSrcType() == SrcType.HDMI){
    		switch(panelType){
	    		default:
	    		case LG42E83:
	    		case LG42E85:
	    			Log.d(DBTAG,"set HDMI color management OPTIMIZE(OptiMapHdmi_LG42E83/LG42E85)");
	    			SetData(cmOpt.OptiMapHdmi_LG42E83);
	    			break;
	    		case LG47E83:
	    		case LG47E85:
	    			Log.d(DBTAG,"set HDMI color management OPTIMIZE(OptiMapHdmi_LG47E83/LG47E85)");
	    			SetData(cmOpt.OptiMapHdmi_LG47E83);
	    			break;
	    		case LG55E83:
	    			Log.d(DBTAG,"set HDMI color management OPTIMIZE(OptiMapHdmi_LG55E83)");
	    			SetData(cmOpt.OptiMapHdmi_LG55E83);
	    			break;
	//    		case LG42E85:
	//    			Log.d(DBTAG,"set HDMI color management OPTIMIZE(OptiMapHdmi_LG42E85)");
	//    			SetData(cmOpt.OptiMapHdmi_LG42E85);
	//    			break;
	//    		case LG47E85:
	//    			Log.d(DBTAG,"set HDMI color management OPTIMIZE(OptiMapHdmi_LG47E85)");
	//    			SetData(cmOpt.OptiMapHdmi_LG47E85);
	//    			break;
    		}
    	} else {
    		switch(panelType){
	    		default:
	    		case LG42E83:
	    		case LG42E85:
	    			Log.d(DBTAG,"set color management OPTIMIZE(OptiMap_LG42E83/LG42E85)");
	    			SetData(cmOpt.OptiMap_LG42E83);
	    			break;
	    		case LG47E83:
	    		case LG47E85:
	    			Log.d(DBTAG,"set color management OPTIMIZE(OptiMap_LG47E83/LG47E85)");
	    			SetData(cmOpt.OptiMap_LG47E83);
	    			break;
	    		case LG55E83:
	    			Log.d(DBTAG,"set color management OPTIMIZE(OptiMap_LG55E83)");
	    			SetData(cmOpt.OptiMap_LG55E83);
	    			break;
	//    		case LG42E85:
	//    			Log.d(DBTAG,"set color management OPTIMIZE(OptiMap_LG42E85)");
	//    			SetData(cmOpt.OptiMap_LG42E85);
	//    			break;
	//    		case LG47E85:
	//    			Log.d(DBTAG,"set color management OPTIMIZE(OptiMap_LG47E85)");
	//    			SetData(cmOpt.OptiMap_LG47E85);
	//    			break;
    		}
    	}
    }
    
    public void SetEnhanceData(PanelType panelType){
    	Enhance cmEnh = new Enhance();
    	
		switch(panelType){
			default:
			case LG42E83:
			case LG42E85:	
				Log.d(DBTAG,"set color management ENHANCE(ehanceMap_LG42E83/LG42E85)");
				SetData(cmEnh.ehanceMap_LG42E83);
				break;
			case LG47E83:
			case LG47E85:
				Log.d(DBTAG,"set color management ENHANCE(ehanceMap_LG47E83/LG47E85)");
				SetData(cmEnh.ehanceMap_LG47E83);
				break;
			case LG55E83:
				Log.d(DBTAG,"set color management ENHANCE(ehanceMap_LG55E83)");
				SetData(cmEnh.ehanceMap_LG55E83);
				break;
	//		case LG42E85:
	//			Log.d(DBTAG,"set color management ENHANCE(ehanceMap_LG42E85)");
	//			SetData(cmEnh.ehanceMap_LG42E85);
	//			break;
	//		case LG47E85:
	//			Log.d(DBTAG,"set color management ENHANCE(ehanceMap_LG47E85)");
	//			SetData(cmEnh.ehanceMap_LG47E85);
	//			break;
		}
    }
    
	public CmRegMap() {

	}

	public void SetData(long inputReg[]) {
		if (inputReg != null) {
			for (int i = 0; i < 50; i++) {
				if (inputReg[i] >= 0x80000000) {
					inputReg[i] = inputReg[i] << 32;
					inputReg[i] = inputReg[i] >>> 32;
				}
				this.reg[i] = inputReg[i];
			}
		}
	}
}

class CmConfig {
	public int chroma_en = 1;
	public int sat_sel = 0;
	public int uv_adj_en = 1;
	public int rgb_to_hue_en = 1;
	public int csc_sel;

	public CmConfig() {

	}

	public void SetData(int chromaEn, int satSel, int uvAdjEn, int rgbTohueEn,
			int cscSel) {
		if (chromaEn != -1)
			this.chroma_en = chromaEn;
		if (satSel != -1)
			this.sat_sel = satSel;
		if (uvAdjEn != -1)
			this.uv_adj_en = uvAdjEn;
		if (rgbTohueEn != -1)
			this.rgb_to_hue_en = rgbTohueEn;
		if (cscSel != -1)
			this.csc_sel = cscSel;
	}
}

class CmDemo {
	enum DemoPosition {
		TOP, BOTTOM, LEFT, RIGHT,
	}

	public DemoPosition demoPos;

	public int en = 1;
	public int pos = demoPos.TOP.ordinal();
	public int hlight_adj = 0;
	public long wid = 960;
	/** bar setting S */
	public int enBar = 1;
	public int barWid = 2;
	public int cr = 0x08;
	public int cb = 0x00;
	public int y = 0x00;

	void isEnable(boolean isEn) {
		if (isEn == true)
			this.en = 1;
		else
			this.en = 0;
	}

	void setArea(DemoPosition pos, long width) {
		this.pos = pos.ordinal();
		this.wid = width;
	}

	void setBarColor(int Cb, int Cr, int Y) {
		this.cr = cr;
		this.cb = cb;
		this.y = y;
	}

	void setBarWidth(int width) {
		this.barWid = width;
	}

	public void SetCMDemo() {
		this.setArea(this.demoPos.TOP, 400);
		this.isEnable(true);
		this.setBarWidth(2);
		this.setBarColor(0, 0x7f, 0);
		// SetCMDemo(cmDemoCfg);
	}
}

/******************************************************
 * panel 0: for 3D demo panel gamma panel 1: LG panel gamme from Skyworth panel
 * 2: N/A panel 3: N/A
 ******************************************************/
class Gamma {
	final String DBTAG = "VPP_JNI";
	
	public void SetStandard(PanelType panelType) {
		Stand gammaStd = new Stand();
        
        if(vdinJNI.GetSrcType() == SrcType.HDMI){
        	switch(panelType){
        		default:
        		case LG42E83:
        		case LG42E85:
        			Log.d(DBTAG,"set (LG42E83/LG42E85) HDMI standard gamma");
        			vppJNI.SetRedGammaTbl(gammaStd.LG42E83_R_HDMI);
     	            vppJNI.SetGreenGammaTbl(gammaStd.LG42E83_G_HDMI);
     	            vppJNI.SetBlueGammaTbl(gammaStd.LG42E83_B_HDMI);
        			break;
        		case LG47E83:
        		case LG47E85:
        			Log.d(DBTAG,"set (LG47E83/LG47E85) HDMI standard gamma");
        			vppJNI.SetRedGammaTbl(gammaStd.LG47E83_R_HDMI);
    	            vppJNI.SetGreenGammaTbl(gammaStd.LG47E83_G_HDMI);
    	            vppJNI.SetBlueGammaTbl(gammaStd.LG47E83_B_HDMI);
        			break;
        		case LG55E83:
        			Log.d(DBTAG,"set (LG55E83) HDMI standard gamma");
        			vppJNI.SetRedGammaTbl(gammaStd.LG55E83_R_HDMI);
    	            vppJNI.SetGreenGammaTbl(gammaStd.LG55E83_G_HDMI);
    	            vppJNI.SetBlueGammaTbl(gammaStd.LG55E83_B_HDMI);
        			break;
//        		case LG42E85:
//        			Log.d(DBTAG,"set (LG42E85) HDMI standard gamma");
//        			vppJNI.SetRedGammaTbl(gammaStd.LG42E85_R_HDMI);
//    	            vppJNI.SetGreenGammaTbl(gammaStd.LG42E85_G_HDMI);
//    	            vppJNI.SetBlueGammaTbl(gammaStd.LG42E85_B_HDMI);
//        			break;
//        		case LG47E85:
//        			Log.d(DBTAG,"set (LG47E85) HMDI standard gamma");
//        			vppJNI.SetRedGammaTbl(gammaStd.LG47E85_R_HDMI);
//    	            vppJNI.SetGreenGammaTbl(gammaStd.LG47E85_G_HDMI);
//    	            vppJNI.SetBlueGammaTbl(gammaStd.LG47E85_B_HDMI);
//        			break;
	        }
        }else{
        	switch(panelType){
        		default:
				case LG42E83:
				case LG42E85:
					Log.d(DBTAG,"set (LG42E83/LG42E85) (not HDMI) standard gamma");
					vppJNI.SetRedGammaTbl(gammaStd.LG42E83_R);
			        vppJNI.SetGreenGammaTbl(gammaStd.LG42E83_G);
			        vppJNI.SetBlueGammaTbl(gammaStd.LG42E83_B);
					break;
				case LG47E83:
				case LG47E85:
					Log.d(DBTAG,"set (LG47E83/LG47E85) (not HDMI) standard gamma");
					vppJNI.SetRedGammaTbl(gammaStd.LG47E83_R);
		            vppJNI.SetGreenGammaTbl(gammaStd.LG47E83_G);
		            vppJNI.SetBlueGammaTbl(gammaStd.LG47E83_B);
					break;
				case LG55E83:
					Log.d(DBTAG,"set (LG55E83) (not HDMI) standard gamma");
					vppJNI.SetRedGammaTbl(gammaStd.LG55E83_R);
		            vppJNI.SetGreenGammaTbl(gammaStd.LG55E83_G);
		            vppJNI.SetBlueGammaTbl(gammaStd.LG55E83_B);
					break;
//				case LG42E85:
//					Log.d(DBTAG,"set (LG42E85) (not HDMI) standard gamma");
//					vppJNI.SetRedGammaTbl(gammaStd.LG42E85_R);
//		            vppJNI.SetGreenGammaTbl(gammaStd.LG42E85_G);
//		            vppJNI.SetBlueGammaTbl(gammaStd.LG42E85_B);
//					break;
//				case LG47E85:
//					Log.d(DBTAG,"set (LG47E85) (not HDMI) standard gamma");					
//					vppJNI.SetRedGammaTbl(gammaStd.LG47E85_R);
//		            vppJNI.SetGreenGammaTbl(gammaStd.LG47E85_G);
//		            vppJNI.SetBlueGammaTbl(gammaStd.LG47E85_B);
//					break;
        	}
		}
	}

//    public void SetWarm(PanelType panelType) {
//        Warm gammaWarm = new Warm();
//        
//    	switch(panelType){
//		case LG42E83:
//			vppJNI.SetRedGammaTbl(gammaWarm.Panel0_R);
//            vppJNI.SetGreenGammaTbl(gammaWarm.Panel0_G);
//            vppJNI.SetBlueGammaTbl(gammaWarm.Panel0_B);
//			break;
//		case LG47E83:
//			vppJNI.SetRedGammaTbl(gammaWarm.Panel1_R);
//            vppJNI.SetGreenGammaTbl(gammaWarm.Panel1_G);
//            vppJNI.SetBlueGammaTbl(gammaWarm.Panel1_B);
//			break;
//		case LG55E83:
//			 vppJNI.SetRedGammaTbl(gammaWarm.Panel2_R);
//	         vppJNI.SetGreenGammaTbl(gammaWarm.Panel2_G);
//	         vppJNI.SetBlueGammaTbl(gammaWarm.Panel2_B);
//			break;
//		case LG42E85:
//            vppJNI.SetRedGammaTbl(gammaWarm.Panel3_R);
//            vppJNI.SetGreenGammaTbl(gammaWarm.Panel3_G);
//            vppJNI.SetBlueGammaTbl(gammaWarm.Panel3_B);
//			break;
//		case LG47E85:
//            vppJNI.SetRedGammaTbl(gammaWarm.Panel3_R);
//            vppJNI.SetGreenGammaTbl(gammaWarm.Panel3_G);
//            vppJNI.SetBlueGammaTbl(gammaWarm.Panel3_B);
//			break;
//    	}
//    }
//
//    public void SetCold(PanelType panelType) {
//        Cold gammaCold = new Cold();
//        
//    	switch(panelType){
//		case LG42E83:
//			vppJNI.SetRedGammaTbl(gammaCold.Panel0_R);
//            vppJNI.SetGreenGammaTbl(gammaCold.Panel0_G);
//            vppJNI.SetBlueGammaTbl(gammaCold.Panel0_B);
//			break;
//		case LG47E83:
//			vppJNI.SetRedGammaTbl(gammaCold.Panel1_R);
//            vppJNI.SetGreenGammaTbl(gammaCold.Panel1_G);
//            vppJNI.SetBlueGammaTbl(gammaCold.Panel1_B);
//			break;
//		case LG55E83:
//			vppJNI.SetRedGammaTbl(gammaCold.Panel2_R);
//            vppJNI.SetGreenGammaTbl(gammaCold.Panel2_G);
//            vppJNI.SetBlueGammaTbl(gammaCold.Panel2_B);
//			break;
//		case LG42E85:
//			vppJNI.SetRedGammaTbl(gammaCold.Panel3_R);
//            vppJNI.SetGreenGammaTbl(gammaCold.Panel3_G);
//            vppJNI.SetBlueGammaTbl(gammaCold.Panel3_B);
//			break;
//		case LG47E85:
//			vppJNI.SetRedGammaTbl(gammaCold.Panel3_R);
//            vppJNI.SetGreenGammaTbl(gammaCold.Panel3_G);
//            vppJNI.SetBlueGammaTbl(gammaCold.Panel3_B);
//			break;
//    	}    	
//    }

	class Stand {
    	/**************************************************
    	 * 			LG42'E83 HDMI
    	 ***************************************************/
        int LG42E83_R_HDMI[] = {
        		0, 4, 8, 12, 16, 20, 24, 28, 32, 37, 41, 45,
				49, 53, 57, 61, 65, 69, 74, 78, 82, 86, 90, 94, 98, 103, 107,
				111, 115, 119, 123, 128, 132, 136, 140, 144, 148, 153, 157,
				161, 165, 169, 173, 178, 182, 186, 190, 194, 198, 203, 207,
				211, 215, 219, 223, 228, 232, 236, 240, 244, 248, 253, 257,
				261, 265, 269, 273, 278, 282, 286, 290, 294, 298, 303, 307,
				311, 315, 319, 323, 328, 332, 336, 340, 344, 348, 352, 357,
				361, 365, 369, 373, 377, 381, 385, 390, 394, 398, 402, 406,
				410, 414, 418, 423, 427, 431, 435, 439, 443, 447, 451, 455,
				460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 505,
				509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553,
				557, 561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602,
				606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650,
				654, 658, 662, 665, 669, 673, 677, 681, 685, 689, 693, 697,
				701, 705, 709, 713, 717, 721, 725, 729, 733, 736, 740, 744,
				748, 752, 756, 760, 764, 768, 772, 775, 779, 783, 787, 791,
				795, 799, 802, 806, 810, 814, 818, 822, 826, 829, 833, 837,
				841, 845, 849, 852, 856, 860, 864, 868, 871, 875, 879, 883,
				886, 890, 894, 898, 902, 905, 909, 913, 917, 920, 924, 928,
				932, 935, 939, 943, 946, 950, 954, 958, 961, 965, 969, 972,
				976, 980, 983, 987, 991, 994, 998, 1002, 1005, 1009, 1013,
				1016, 1020
        };
        int LG42E83_G_HDMI[] = {
        		0, 4, 7, 11, 15, 19, 22, 26, 30, 34, 37, 41,
				45, 49, 53, 56, 60, 64, 68, 72, 75, 79, 83, 87, 91, 95, 98,
				102, 106, 110, 114, 118, 121, 125, 129, 133, 137, 141, 144,
				148, 152, 156, 160, 164, 167, 171, 175, 179, 183, 187, 191,
				194, 198, 202, 206, 210, 214, 217, 221, 225, 229, 233, 237,
				240, 244, 248, 252, 256, 260, 264, 267, 271, 275, 279, 283,
				287, 290, 294, 298, 302, 306, 309, 313, 317, 321, 325, 329,
				332, 336, 340, 344, 348, 351, 355, 359, 363, 367, 370, 374,
				378, 382, 386, 389, 393, 397, 401, 405, 408, 412, 416, 420,
				424, 427, 431, 435, 439, 442, 446, 450, 454, 457, 461, 465,
				469, 472, 476, 480, 484, 487, 491, 495, 499, 502, 506, 510,
				514, 517, 521, 525, 528, 532, 536, 540, 543, 547, 551, 554,
				558, 562, 566, 569, 573, 577, 580, 584, 588, 591, 595, 599,
				602, 606, 610, 613, 617, 621, 624, 628, 632, 635, 639, 642,
				646, 650, 653, 657, 661, 664, 668, 671, 675, 679, 682, 686,
				689, 693, 697, 700, 704, 707, 711, 715, 718, 722, 725, 729,
				732, 736, 740, 743, 747, 750, 754, 757, 761, 764, 768, 771,
				775, 778, 782, 785, 789, 793, 796, 800, 803, 807, 810, 813,
				817, 820, 824, 827, 831, 834, 838, 841, 845, 848, 852, 855,
				858, 862, 865, 869, 872, 876, 879, 882, 886, 889, 893, 896,
				900, 903, 906, 910, 913, 916, 920, 923, 927, 930, 933, 937, 940
        };
        int LG42E83_B_HDMI[] = {
        		0, 4, 8, 11, 15, 19, 23, 27, 31, 35, 39, 42,
				46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 89, 93, 97, 101,
				105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149,
				153, 157, 161, 165, 168, 172, 176, 180, 184, 188, 192, 196,
				200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244,
				248, 252, 256, 259, 263, 267, 271, 275, 279, 283, 287, 291,
				295, 299, 303, 307, 311, 315, 319, 323, 327, 330, 334, 338,
				342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 385,
				389, 393, 397, 401, 405, 409, 413, 417, 421, 424, 428, 432,
				436, 440, 444, 448, 452, 456, 459, 463, 467, 471, 475, 479,
				483, 487, 490, 494, 498, 502, 506, 510, 514, 517, 521, 525,
				529, 533, 537, 540, 544, 548, 552, 556, 560, 563, 567, 571,
				575, 579, 582, 586, 590, 594, 598, 601, 605, 609, 613, 616,
				620, 624, 628, 632, 635, 639, 643, 647, 650, 654, 658, 662,
				665, 669, 673, 677, 680, 684, 688, 691, 695, 699, 703, 706,
				710, 714, 717, 721, 725, 729, 732, 736, 740, 743, 747, 751,
				754, 758, 762, 765, 769, 773, 776, 780, 783, 787, 791, 794,
				798, 802, 805, 809, 813, 816, 820, 823, 827, 831, 834, 838,
				841, 845, 848, 852, 856, 859, 863, 866, 870, 873, 877, 881,
				884, 888, 891, 895, 898, 902, 905, 909, 912, 916, 919, 923,
				926, 930, 933, 937, 940, 944, 947, 951, 954, 958, 961, 965, 968
        };
        
    	/**************************************************
    	 * 			LG47'E83 HDMI
    	 ***************************************************/
        int LG47E83_R_HDMI[] = {
        		0, 4, 8, 12, 16, 21, 25, 29, 32, 35, 40, 44, 48,
				53, 57, 61, 65, 67, 71, 75, 80, 85, 89, 94, 98, 101, 105, 110,
				114, 120, 125, 129, 134, 138, 142, 146, 151, 155, 159, 163,
				167, 171, 175, 178, 182, 185, 189, 194, 198, 203, 207, 211,
				215, 219, 223, 228, 232, 236, 240, 244, 248, 253, 257, 261,
				265, 269, 273, 278, 282, 286, 290, 294, 298, 303, 307, 311,
				315, 319, 323, 328, 332, 336, 340, 344, 348, 352, 357, 361,
				365, 369, 373, 377, 381, 385, 390, 394, 398, 402, 406, 410,
				414, 418, 423, 427, 431, 435, 439, 443, 447, 451, 455, 460,
				464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 505, 509,
				513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553, 557,
				561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606,
				610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654,
				658, 662, 665, 669, 673, 677, 681, 685, 689, 693, 697, 701,
				705, 709, 713, 717, 721, 725, 729, 733, 736, 740, 744, 748,
				752, 756, 760, 764, 768, 772, 775, 779, 783, 787, 791, 795,
				799, 802, 806, 810, 814, 818, 822, 826, 829, 833, 837, 841,
				845, 849, 852, 856, 860, 864, 868, 871, 875, 879, 883, 886,
				890, 894, 898, 902, 905, 909, 913, 917, 920, 924, 928, 932,
				935, 939, 943, 946, 950, 954, 958, 961, 965, 969, 972, 976,
				980, 983, 987, 991, 994, 998, 1002, 1005, 1009, 1013, 1016,
				1020
			};
        int LG47E83_G_HDMI[] = {
        		0, 4, 7, 11, 15, 19, 22, 26, 30, 34, 37, 41, 45,
				49, 52, 56, 60, 64, 68, 71, 75, 79, 83, 87, 90, 94, 98, 102,
				106, 109, 113, 117, 121, 125, 128, 132, 136, 140, 144, 148,
				151, 155, 159, 163, 167, 171, 174, 178, 182, 186, 190, 194,
				197, 201, 205, 209, 213, 216, 220, 224, 228, 232, 236, 239,
				243, 247, 251, 255, 259, 262, 266, 270, 274, 278, 281, 285,
				289, 293, 297, 301, 304, 308, 312, 316, 320, 323, 327, 331,
				335, 339, 342, 346, 350, 354, 358, 361, 365, 369, 373, 376,
				380, 384, 388, 392, 395, 399, 403, 407, 410, 414, 418, 422,
				425, 429, 433, 437, 441, 444, 448, 452, 455, 459, 463, 467,
				470, 474, 478, 482, 485, 489, 493, 497, 500, 504, 508, 511,
				515, 519, 523, 526, 530, 534, 537, 541, 545, 548, 552, 556,
				559, 563, 567, 570, 574, 578, 581, 585, 589, 592, 596, 600,
				603, 607, 611, 614, 618, 622, 625, 629, 632, 636, 640, 643,
				647, 651, 654, 658, 661, 665, 669, 672, 676, 679, 683, 687,
				690, 694, 697, 701, 704, 708, 712, 715, 719, 722, 726, 729,
				733, 736, 740, 743, 747, 751, 754, 758, 761, 765, 768, 772,
				775, 779, 782, 786, 789, 793, 796, 800, 803, 807, 810, 813,
				817, 820, 824, 827, 831, 834, 838, 841, 845, 848, 851, 855,
				858, 862, 865, 869, 872, 875, 879, 882, 886, 889, 892, 896,
				899, 902, 906, 909, 913, 916, 919, 923, 926, 929, 933, 936
				};
        int LG47E83_B_HDMI[] = {
        		0, 4, 7, 11, 14, 20, 24, 26, 29, 33, 36, 38, 41,
				44, 48, 51, 55, 58, 62, 67, 72, 78, 83, 87, 92, 95, 99, 103,
				106, 110, 114, 117, 121, 124, 127, 131, 134, 138, 141, 144,
				148, 152, 155, 159, 162, 166, 170, 174, 178, 181, 185, 189,
				192, 196, 200, 203, 207, 211, 215, 218, 222, 226, 230, 233,
				237, 241, 244, 248, 252, 256, 259, 263, 267, 271, 274, 278,
				282, 285, 289, 293, 297, 300, 304, 308, 311, 315, 319, 322,
				326, 330, 334, 337, 341, 345, 348, 352, 356, 359, 363, 367,
				370, 374, 378, 382, 385, 389, 393, 396, 400, 404, 407, 411,
				415, 418, 422, 426, 429, 433, 437, 440, 444, 447, 451, 455,
				458, 462, 466, 469, 473, 477, 480, 484, 487, 491, 495, 498,
				502, 506, 509, 513, 516, 520, 524, 527, 531, 534, 538, 542,
				545, 549, 552, 556, 559, 563, 567, 570, 574, 577, 581, 584,
				588, 591, 595, 599, 602, 606, 609, 613, 616, 620, 623, 627,
				630, 634, 637, 641, 644, 648, 651, 655, 658, 662, 665, 669,
				672, 676, 679, 683, 686, 690, 693, 697, 700, 704, 707, 711,
				714, 718, 721, 724, 728, 731, 735, 738, 742, 745, 748, 752,
				755, 759, 762, 765, 769, 772, 776, 779, 782, 786, 789, 793,
				796, 799, 803, 806, 809, 813, 816, 820, 823, 826, 830, 833,
				836, 840, 843, 846, 850, 853, 856, 860, 863, 866, 869, 873,
				876, 879, 883, 886, 889, 892, 896, 899, 902, 905, 909, 912
				};
        
    	/**************************************************
    	 * 			LG55'E83 HDMI
    	 ***************************************************/
        int LG55E83_R_HDMI[] = {
        		0, 5, 10, 15, 19, 24, 28, 33, 37, 42, 46, 51,
				55, 60, 64, 69, 73, 77, 81, 85, 90, 96, 100, 104, 108, 112,
				116, 120, 125, 129, 133, 138, 142, 147, 151, 155, 159, 163,
				167, 172, 176, 180, 185, 189, 194, 199, 203, 207, 211, 216,
				220, 224, 228, 233, 238, 242, 247, 252, 256, 260, 264, 269,
				273, 277, 282, 286, 291, 295, 299, 304, 308, 313, 317, 321,
				326, 330, 335, 339, 344, 348, 353, 357, 362, 366, 370, 374,
				378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 419, 423,
				428, 432, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473,
				477, 481, 485, 488, 492, 496, 499, 504, 508, 512, 516, 519,
				523, 527, 531, 535, 540, 544, 548, 553, 557, 562, 566, 570,
				573, 577, 581, 584, 588, 591, 595, 599, 602, 606, 610, 614,
				617, 621, 625, 629, 634, 638, 642, 646, 650, 655, 659, 663,
				668, 672, 676, 680, 685, 689, 693, 697, 701, 705, 708, 712,
				716, 719, 723, 727, 730, 734, 737, 740, 744, 747, 751, 754,
				758, 762, 766, 769, 773, 776, 780, 784, 788, 791, 795, 799,
				803, 807, 810, 814, 818, 822, 826, 829, 833, 836, 840, 843,
				847, 850, 854, 857, 861, 864, 868, 871, 875, 878, 882, 885,
				889, 892, 896, 899, 903, 907, 910, 914, 918, 922, 925, 929,
				933, 937, 942, 945, 949, 953, 957, 961, 965, 969, 972, 976,
				980, 984, 987, 991, 994, 998, 1001, 1004, 1007, 1010, 1013,
				1015, 1018, 1020
        };
        int LG55E83_G_HDMI[] = {
        		0, 5, 10, 14, 19, 23, 27, 32, 36, 40, 45, 49,
				53, 57, 61, 66, 70, 74, 78, 82, 86, 90, 95, 99, 103, 107, 111,
				115, 119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 159,
				163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207,
				211, 215, 219, 223, 227, 231, 234, 238, 242, 246, 250, 254,
				258, 262, 266, 270, 274, 278, 281, 285, 289, 293, 297, 301,
				305, 309, 312, 316, 320, 324, 328, 332, 336, 340, 343, 347,
				351, 355, 359, 363, 366, 370, 374, 378, 382, 386, 390, 393,
				397, 401, 405, 409, 412, 416, 420, 424, 428, 432, 435, 439,
				443, 447, 451, 454, 458, 462, 466, 470, 473, 477, 481, 485,
				489, 492, 496, 500, 504, 508, 511, 515, 519, 523, 526, 530,
				534, 538, 542, 545, 549, 553, 557, 560, 564, 568, 572, 576,
				579, 583, 587, 591, 594, 598, 602, 606, 609, 613, 617, 621,
				624, 628, 632, 636, 639, 643, 647, 651, 654, 658, 662, 665,
				669, 673, 677, 680, 684, 688, 692, 695, 699, 703, 707, 710,
				714, 718, 721, 725, 729, 733, 736, 740, 744, 747, 751, 755,
				759, 762, 766, 770, 773, 777, 781, 785, 788, 792, 796, 799,
				803, 807, 811, 814, 818, 822, 825, 829, 833, 836, 840, 844,
				847, 851, 855, 859, 862, 866, 870, 873, 877, 881, 884, 888,
				892, 895, 899, 903, 906, 910, 914, 918, 921, 925, 929, 932,
				936, 940, 943, 947, 951, 954, 958, 962, 965, 969, 973, 976, 980
        };
        int LG55E83_B_HDMI[] = {
        		0, 16, 16, 28, 32, 36, 40, 43, 46, 50, 53, 56,
				60, 65, 69, 74, 78, 82, 86, 90, 94, 99, 103, 107, 111, 115,
				119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 160, 164,
				168, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 212,
				216, 220, 224, 228, 232, 235, 239, 243, 246, 250, 254, 257,
				261, 264, 268, 271, 275, 278, 282, 285, 289, 292, 296, 299,
				303, 307, 310, 314, 318, 322, 325, 329, 333, 337, 341, 345,
				349, 353, 357, 361, 365, 368, 372, 376, 379, 383, 387, 390,
				394, 397, 401, 404, 408, 411, 415, 419, 423, 426, 430, 434,
				438, 442, 446, 450, 453, 457, 461, 465, 468, 472, 475, 479,
				482, 486, 489, 493, 497, 500, 504, 508, 511, 515, 519, 523,
				526, 530, 534, 537, 541, 545, 548, 552, 556, 560, 564, 569,
				573, 577, 581, 585, 588, 592, 596, 600, 604, 607, 611, 614,
				618, 621, 625, 628, 632, 635, 639, 642, 646, 649, 653, 657,
				661, 665, 668, 673, 677, 681, 686, 690, 694, 698, 702, 706,
				711, 715, 719, 723, 727, 731, 734, 738, 742, 745, 749, 753,
				757, 761, 765, 769, 773, 777, 781, 785, 789, 793, 797, 800,
				804, 808, 812, 816, 819, 823, 827, 831, 835, 839, 843, 847,
				850, 854, 858, 862, 866, 870, 874, 878, 882, 886, 890, 894,
				898, 902, 906, 910, 914, 918, 921, 925, 929, 933, 937, 941,
				945, 949, 952, 956, 960, 964, 968, 972, 976, 980, 984, 988,
				992, 996           
        };
        
    	/**************************************************
    	 * 			LG42'E85 HDMI
    	 ***************************************************/
//        int LG42E85_R_HDMI[] = {
//        		0, 4, 8, 12, 16, 20, 24, 28, 32, 38, 42, 46, 49, 52, 56, 60, 63, 67, 71, 75, 79, 
//        		83, 87, 91, 95, 99, 103, 108, 112, 116, 121, 126, 130, 135, 140, 144, 148, 153, 
//        		157, 161, 165, 169, 173, 178, 182, 186, 190, 194, 198, 203, 207, 211, 215, 219, 
//        		223, 228, 232, 236, 240, 244, 248, 253, 257, 261, 265, 269, 273, 278, 282, 286, 
//        		290, 294, 298, 303, 307, 311, 315, 319, 323, 327, 332, 336, 340, 344, 348, 352, 
//        		357, 361, 365, 369, 373, 377, 381, 385, 390, 394, 398, 402, 406, 410, 414, 418, 
//        		423, 427, 431, 435, 439, 443, 447, 451, 455, 460, 464, 468, 472, 476, 480, 484, 
//        		488, 492, 496, 500, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 
//        		553, 557, 561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606, 610, 614, 
//        		618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 665, 669, 673, 677, 
//        		681, 685, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 736, 740, 
//        		744, 748, 752, 756, 760, 764, 768, 772, 775, 779, 783, 787, 791, 795, 799, 802, 
//        		806, 810, 814, 818, 822, 826, 829, 833, 837, 841, 845, 849, 852, 856, 860, 864, 
//        		868, 871, 875, 879, 883, 886, 890, 894, 898, 902, 905, 909, 913, 917, 920, 924, 
//        		928, 932, 935, 939, 943, 946, 950, 954, 958, 961, 965, 969, 972, 976, 980, 983, 
//        		987, 991, 994, 998, 1002, 1005, 1009, 1013, 1016, 1020
//        };
//        int LG42E85_G_HDMI[] = {
//        		0, 3, 7, 11, 14, 18, 21, 25, 28, 33, 36, 40, 43, 45, 48, 52, 55, 59, 63, 66, 70, 
//        		73, 77, 80, 84, 87, 91, 95, 99, 103, 106, 110, 114, 118, 122, 125, 129, 133, 
//        		136, 140, 144, 147, 151, 155, 158, 162, 165, 169, 173, 176, 180, 184, 187, 191, 
//        		195, 198, 202, 205, 209, 213, 216, 220, 224, 227, 231, 234, 238, 242, 245, 249, 
//        		253, 256, 260, 263, 267, 271, 274, 278, 282, 285, 289, 292, 296, 300, 303, 307, 
//        		310, 314, 318, 321, 325, 328, 332, 336, 339, 343, 346, 350, 354, 357, 361, 364, 
//        		368, 371, 375, 379, 382, 386, 389, 393, 397, 400, 404, 407, 411, 414, 418, 421, 
//        		425, 429, 432, 436, 439, 443, 446, 450, 453, 457, 460, 464, 468, 471, 475, 478, 
//        		482, 485, 489, 492, 496, 499, 503, 506, 510, 513, 517, 520, 524, 527, 531, 534, 
//        		538, 541, 545, 548, 552, 555, 559, 562, 566, 569, 572, 576, 579, 583, 586, 590, 
//        		593, 597, 600, 603, 607, 610, 614, 617, 621, 624, 627, 631, 634, 638, 641, 645, 
//        		648, 651, 655, 658, 662, 665, 668, 672, 675, 678, 682, 685, 689, 692, 695, 699, 
//        		702, 705, 709, 712, 715, 719, 722, 725, 729, 732, 735, 739, 742, 745, 749, 752, 
//        		755, 759, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 804, 
//        		808, 811, 814, 817, 821, 824, 827, 830, 834, 837, 840, 843, 847, 850, 853, 856, 
//        		859, 863, 866, 869, 872, 875, 878, 882, 885, 888
//        };
//        int LG42E85_B_HDMI[] = {
//        		0, 0, 0, 11, 15, 21, 25, 28, 32, 37, 40, 43, 46, 48, 51, 54, 57, 60, 64, 67, 71, 
//        		75, 79, 82, 86, 90, 94, 98, 101, 105, 109, 114, 118, 122, 126, 130, 134, 138, 
//        		142, 146, 150, 154, 157, 161, 164, 168, 171, 175, 179, 183, 186, 190, 194, 198, 
//        		201, 205, 209, 213, 216, 220, 224, 227, 231, 235, 239, 242, 246, 250, 254, 258, 
//        		261, 265, 269, 273, 277, 281, 284, 288, 292, 296, 299, 303, 307, 310, 314, 318, 
//        		322, 325, 329, 333, 337, 340, 344, 348, 351, 355, 359, 363, 366, 370, 374, 377, 
//        		381, 385, 389, 392, 396, 400, 403, 407, 411, 415, 418, 422, 426, 429, 433, 437, 
//        		440, 444, 448, 451, 455, 459, 462, 466, 470, 473, 477, 481, 484, 488, 492, 495, 
//        		499, 503, 506, 510, 514, 517, 521, 524, 528, 532, 535, 539, 543, 546, 550, 553, 
//        		557, 561, 564, 568, 572, 575, 579, 582, 586, 589, 593, 597, 600, 604, 607, 611, 
//        		615, 618, 622, 625, 629, 632, 636, 639, 643, 647, 650, 654, 657, 661, 664, 668, 
//        		671, 675, 678, 682, 685, 689, 692, 696, 699, 703, 706, 710, 713, 717, 720, 724, 
//        		727, 731, 734, 738, 741, 745, 748, 752, 755, 758, 762, 765, 769, 772, 776, 779, 
//        		783, 786, 789, 793, 796, 800, 803, 806, 810, 813, 817, 820, 823, 827, 830, 833, 
//        		837, 840, 844, 847, 850, 854, 857, 860, 864, 867, 870, 874, 877, 880, 884, 887, 
//        		890, 894, 897, 900, 904, 907, 910, 913, 917, 920
//        };
        
    	/**************************************************
    	 * 			LG47'E85 HDMI
    	 ***************************************************/
//        int LG47E85_R_HDMI[] = {
//        		0, 4, 8, 12, 16, 20, 24, 28, 32, 38, 42, 46, 49, 52, 56, 60, 63, 67, 71, 75, 79, 
//        		83, 87, 91, 95, 99, 103, 108, 112, 116, 121, 126, 130, 135, 140, 144, 148, 153, 
//        		157, 161, 165, 169, 173, 178, 182, 186, 190, 194, 198, 203, 207, 211, 215, 219, 
//        		223, 228, 232, 236, 240, 244, 248, 253, 257, 261, 265, 269, 273, 278, 282, 286, 
//        		290, 294, 298, 303, 307, 311, 315, 319, 323, 327, 332, 336, 340, 344, 348, 352, 
//        		357, 361, 365, 369, 373, 377, 381, 385, 390, 394, 398, 402, 406, 410, 414, 418, 
//        		423, 427, 431, 435, 439, 443, 447, 451, 455, 460, 464, 468, 472, 476, 480, 484, 
//        		488, 492, 496, 500, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 
//        		553, 557, 561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606, 610, 614, 
//        		618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 665, 669, 673, 677, 
//        		681, 685, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 736, 740, 
//        		744, 748, 752, 756, 760, 764, 768, 772, 775, 779, 783, 787, 791, 795, 799, 802, 
//        		806, 810, 814, 818, 822, 826, 829, 833, 837, 841, 845, 849, 852, 856, 860, 864, 
//        		868, 871, 875, 879, 883, 886, 890, 894, 898, 902, 905, 909, 913, 917, 920, 924, 
//        		928, 932, 935, 939, 943, 946, 950, 954, 958, 961, 965, 969, 972, 976, 980, 983, 
//        		987, 991, 994, 998, 1002, 1005, 1009, 1013, 1016, 1020
//        };
//        int LG47E85_G_HDMI[] = {
//        		0, 3, 7, 11, 14, 18, 21, 25, 28, 33, 36, 40, 43, 45, 48, 52, 55, 59, 63, 66, 70, 
//        		73, 77, 80, 84, 87, 91, 95, 99, 103, 106, 110, 114, 118, 122, 125, 129, 133, 
//        		136, 140, 144, 147, 151, 155, 158, 162, 165, 169, 173, 176, 180, 184, 187, 191, 
//        		195, 198, 202, 205, 209, 213, 216, 220, 224, 227, 231, 234, 238, 242, 245, 249, 
//        		253, 256, 260, 263, 267, 271, 274, 278, 282, 285, 289, 292, 296, 300, 303, 307, 
//        		310, 314, 318, 321, 325, 328, 332, 336, 339, 343, 346, 350, 354, 357, 361, 364, 
//        		368, 371, 375, 379, 382, 386, 389, 393, 397, 400, 404, 407, 411, 414, 418, 421, 
//        		425, 429, 432, 436, 439, 443, 446, 450, 453, 457, 460, 464, 468, 471, 475, 478, 
//        		482, 485, 489, 492, 496, 499, 503, 506, 510, 513, 517, 520, 524, 527, 531, 534, 
//        		538, 541, 545, 548, 552, 555, 559, 562, 566, 569, 572, 576, 579, 583, 586, 590, 
//        		593, 597, 600, 603, 607, 610, 614, 617, 621, 624, 627, 631, 634, 638, 641, 645, 
//        		648, 651, 655, 658, 662, 665, 668, 672, 675, 678, 682, 685, 689, 692, 695, 699, 
//        		702, 705, 709, 712, 715, 719, 722, 725, 729, 732, 735, 739, 742, 745, 749, 752, 
//        		755, 759, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 804, 
//        		808, 811, 814, 817, 821, 824, 827, 830, 834, 837, 840, 843, 847, 850, 853, 856, 
//        		859, 863, 866, 869, 872, 875, 878, 882, 885, 888
//        };
//        int LG47E85_B_HDMI[] = {
//        		0, 0, 0, 11, 15, 21, 25, 28, 32, 37, 40, 43, 46, 48, 51, 54, 57, 60, 64, 67, 71, 
//        		75, 79, 82, 86, 90, 94, 98, 101, 105, 109, 114, 118, 122, 126, 130, 134, 138, 
//        		142, 146, 150, 154, 157, 161, 164, 168, 171, 175, 179, 183, 186, 190, 194, 198, 
//        		201, 205, 209, 213, 216, 220, 224, 227, 231, 235, 239, 242, 246, 250, 254, 258, 
//        		261, 265, 269, 273, 277, 281, 284, 288, 292, 296, 299, 303, 307, 310, 314, 318, 
//        		322, 325, 329, 333, 337, 340, 344, 348, 351, 355, 359, 363, 366, 370, 374, 377, 
//        		381, 385, 389, 392, 396, 400, 403, 407, 411, 415, 418, 422, 426, 429, 433, 437, 
//        		440, 444, 448, 451, 455, 459, 462, 466, 470, 473, 477, 481, 484, 488, 492, 495, 
//        		499, 503, 506, 510, 514, 517, 521, 524, 528, 532, 535, 539, 543, 546, 550, 553, 
//        		557, 561, 564, 568, 572, 575, 579, 582, 586, 589, 593, 597, 600, 604, 607, 611, 
//        		615, 618, 622, 625, 629, 632, 636, 639, 643, 647, 650, 654, 657, 661, 664, 668, 
//        		671, 675, 678, 682, 685, 689, 692, 696, 699, 703, 706, 710, 713, 717, 720, 724, 
//        		727, 731, 734, 738, 741, 745, 748, 752, 755, 758, 762, 765, 769, 772, 776, 779, 
//        		783, 786, 789, 793, 796, 800, 803, 806, 810, 813, 817, 820, 823, 827, 830, 833, 
//        		837, 840, 844, 847, 850, 854, 857, 860, 864, 867, 870, 874, 877, 880, 884, 887, 
//        		890, 894, 897, 900, 904, 907, 910, 913, 917, 920
//        };
        
    /***************************************************
     *     other source gamma table
     **************************************************/
    	/**************************************************
    	 * 			LG42'E83
    	 ***************************************************/
        int LG42E83_R[] = {
        		0, 4, 8, 12, 16, 20, 24, 28, 32, 37, 41, 45, 49,
				53, 57, 61, 65, 69, 74, 78, 82, 86, 90, 94, 98, 103, 107, 111,
				115, 119, 123, 128, 132, 136, 140, 144, 148, 153, 157, 161,
				165, 169, 173, 178, 182, 186, 190, 194, 198, 203, 207, 211,
				215, 219, 223, 228, 232, 236, 240, 244, 248, 253, 257, 261,
				265, 269, 273, 278, 282, 286, 290, 294, 298, 303, 307, 311,
				315, 319, 323, 328, 332, 336, 340, 344, 348, 352, 357, 361,
				365, 369, 373, 377, 381, 385, 390, 394, 398, 402, 406, 410,
				414, 418, 423, 427, 431, 435, 439, 443, 447, 451, 455, 460,
				464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 505, 509,
				513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553, 557,
				561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606,
				610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654,
				658, 662, 665, 669, 673, 677, 681, 685, 689, 693, 697, 701,
				705, 709, 713, 717, 721, 725, 729, 733, 736, 740, 744, 748,
				752, 756, 760, 764, 768, 772, 775, 779, 783, 787, 791, 795,
				799, 802, 806, 810, 814, 818, 822, 826, 829, 833, 837, 841,
				845, 849, 852, 856, 860, 864, 868, 871, 875, 879, 883, 886,
				890, 894, 898, 902, 905, 909, 913, 917, 920, 924, 928, 932,
				935, 939, 943, 946, 950, 954, 958, 961, 965, 969, 972, 976,
				980, 983, 987, 991, 994, 998, 1002, 1005, 1009, 1013, 1016,
				1020
				};
        int LG42E83_G[] = {
        		0, 4, 7, 11, 15, 19, 23, 26, 30, 34, 38, 42, 45,
				49, 53, 57, 61, 65, 68, 72, 76, 80, 84, 88, 91, 95, 99, 103,
				107, 111, 115, 119, 122, 126, 130, 134, 138, 142, 146, 149,
				153, 157, 161, 165, 169, 173, 177, 181, 184, 188, 192, 196,
				200, 204, 208, 212, 215, 219, 223, 227, 231, 235, 239, 243,
				246, 250, 254, 258, 262, 266, 270, 273, 277, 281, 285, 289,
				293, 297, 301, 304, 308, 312, 316, 320, 324, 328, 331, 335,
				339, 343, 347, 351, 354, 358, 362, 366, 370, 374, 377, 381,
				385, 389, 393, 397, 400, 404, 408, 412, 416, 420, 423, 427,
				431, 435, 439, 442, 446, 450, 454, 458, 461, 465, 469, 473,
				476, 480, 484, 488, 492, 495, 499, 503, 507, 510, 514, 518,
				522, 525, 529, 533, 537, 540, 544, 548, 552, 555, 559, 563,
				567, 570, 574, 578, 581, 585, 589, 593, 596, 600, 604, 607,
				611, 615, 619, 622, 626, 630, 633, 637, 641, 644, 648, 652,
				655, 659, 663, 666, 670, 674, 677, 681, 684, 688, 692, 695,
				699, 703, 706, 710, 713, 717, 721, 724, 728, 731, 735, 739,
				742, 746, 749, 753, 757, 760, 764, 767, 771, 774, 778, 782,
				785, 789, 792, 796, 799, 803, 806, 810, 813, 817, 820, 824,
				827, 831, 834, 838, 841, 845, 848, 852, 855, 859, 862, 866,
				869, 873, 876, 880, 883, 887, 890, 893, 897, 900, 904, 907,
				911, 914, 917, 921, 924, 928, 931, 934, 938, 941, 945, 948
				};
        int LG42E83_B[] = {
        		0, 4, 8, 12, 15, 19, 23, 27, 31, 35, 39, 43, 47,
				51, 55, 59, 63, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106,
				110, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154,
				158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202,
				206, 210, 214, 218, 222, 226, 230, 234, 238, 242, 246, 250,
				254, 258, 262, 266, 270, 274, 278, 282, 286, 290, 293, 297,
				301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345,
				349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393,
				396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440,
				444, 448, 452, 455, 459, 463, 467, 471, 475, 479, 483, 487,
				491, 494, 498, 502, 506, 510, 514, 518, 522, 526, 529, 533,
				537, 541, 545, 549, 553, 556, 560, 564, 568, 572, 576, 580,
				583, 587, 591, 595, 599, 602, 606, 610, 614, 618, 622, 625,
				629, 633, 637, 641, 644, 648, 652, 656, 660, 663, 667, 671,
				675, 678, 682, 686, 690, 693, 697, 701, 705, 708, 712, 716,
				720, 723, 727, 731, 735, 738, 742, 746, 749, 753, 757, 760,
				764, 768, 772, 775, 779, 783, 786, 790, 794, 797, 801, 805,
				808, 812, 816, 819, 823, 826, 830, 834, 837, 841, 845, 848,
				852, 855, 859, 863, 866, 870, 873, 877, 881, 884, 888, 891,
				895, 899, 902, 906, 909, 913, 916, 920, 923, 927, 930, 934,
				937, 941, 945, 948, 952, 955, 959, 962, 966, 969, 973, 976
				};
        
    	/**************************************************
    	 * 			LG47'E83
    	 ***************************************************/
        int LG47E83_R[] = {
        		0, 7, 12, 18, 23, 28, 34, 39, 44, 48, 53, 58, 63,
				67, 72, 77, 81, 86, 90, 95, 99, 104, 108, 113, 117, 121, 126,
				130, 134, 139, 143, 147, 152, 156, 160, 164, 168, 173, 177,
				181, 185, 189, 193, 198, 202, 206, 210, 214, 218, 222, 226,
				230, 234, 238, 242, 246, 250, 254, 258, 262, 266, 270, 274,
				278, 282, 286, 290, 294, 298, 302, 306, 310, 314, 318, 321,
				325, 329, 333, 337, 341, 345, 349, 353, 357, 360, 364, 368,
				372, 376, 380, 384, 387, 391, 395, 399, 403, 407, 411, 414,
				418, 422, 426, 430, 434, 437, 441, 445, 449, 453, 456, 460,
				464, 468, 472, 476, 479, 483, 487, 491, 495, 498, 502, 506,
				510, 514, 517, 521, 525, 529, 533, 536, 540, 544, 548, 552,
				555, 559, 563, 567, 571, 574, 578, 582, 586, 590, 593, 597,
				601, 605, 609, 612, 616, 620, 624, 628, 631, 635, 639, 643,
				647, 650, 654, 658, 662, 666, 670, 673, 677, 681, 685, 689,
				692, 696, 700, 704, 708, 712, 715, 719, 723, 727, 731, 735,
				738, 742, 746, 750, 754, 758, 761, 765, 769, 773, 777, 781,
				785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823, 827,
				831, 835, 839, 843, 847, 850, 854, 858, 862, 866, 870, 874,
				878, 882, 886, 889, 893, 897, 901, 905, 909, 913, 917, 921,
				925, 929, 933, 937, 941, 944, 948, 952, 956, 960, 964, 968,
				972, 976, 980, 984, 988, 992, 996, 1000, 1004, 1008, 1012,
				1016, 1020
        };
        int LG47E83_G[] = {
        		0, 6, 11, 16, 21, 26, 31, 35, 40, 44, 49, 53, 58,
				62, 66, 70, 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115,
				119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 158, 162,
				166, 170, 174, 177, 181, 185, 189, 193, 196, 200, 204, 207,
				211, 215, 219, 222, 226, 230, 233, 237, 241, 244, 248, 252,
				255, 259, 263, 266, 270, 273, 277, 281, 284, 288, 291, 295,
				299, 302, 306, 309, 313, 316, 320, 324, 327, 331, 334, 338,
				341, 345, 348, 352, 356, 359, 363, 366, 370, 373, 377, 380,
				384, 387, 391, 394, 398, 401, 405, 408, 412, 415, 419, 422,
				426, 429, 433, 436, 440, 443, 447, 450, 454, 457, 461, 464,
				468, 471, 475, 478, 482, 485, 489, 492, 496, 499, 503, 506,
				510, 513, 517, 520, 524, 527, 531, 534, 538, 541, 545, 548,
				552, 555, 558, 562, 565, 569, 572, 576, 579, 583, 586, 590,
				593, 597, 600, 604, 607, 611, 614, 618, 621, 625, 628, 632,
				635, 639, 642, 646, 649, 653, 656, 660, 664, 667, 671, 674,
				678, 681, 685, 688, 692, 695, 699, 702, 706, 709, 713, 716,
				720, 724, 727, 731, 734, 738, 741, 745, 748, 752, 755, 759,
				763, 766, 770, 773, 777, 780, 784, 788, 791, 795, 798, 802,
				805, 809, 813, 816, 820, 823, 827, 831, 834, 838, 841, 845,
				849, 852, 856, 859, 863, 867, 870, 874, 878, 881, 885, 888,
				892, 896, 899, 903, 907, 910, 914, 918, 921, 925, 929, 932, 936
        };
        int LG47E83_B[] = {
        		0, 6, 11, 16, 21, 25, 30, 34, 39, 43, 48, 52, 56,
				60, 64, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 112,
				116, 120, 124, 128, 132, 136, 139, 143, 147, 151, 154, 158,
				162, 166, 169, 173, 177, 180, 184, 188, 191, 195, 199, 202,
				206, 209, 213, 217, 220, 224, 227, 231, 235, 238, 242, 245,
				249, 252, 256, 259, 263, 266, 270, 273, 277, 280, 284, 287,
				291, 294, 298, 301, 305, 308, 312, 315, 319, 322, 326, 329,
				333, 336, 340, 343, 346, 350, 353, 357, 360, 364, 367, 370,
				374, 377, 381, 384, 388, 391, 394, 398, 401, 405, 408, 412,
				415, 418, 422, 425, 429, 432, 435, 439, 442, 446, 449, 452,
				456, 459, 463, 466, 469, 473, 476, 480, 483, 486, 490, 493,
				497, 500, 503, 507, 510, 514, 517, 520, 524, 527, 531, 534,
				537, 541, 544, 548, 551, 554, 558, 561, 565, 568, 571, 575,
				578, 582, 585, 588, 592, 595, 599, 602, 605, 609, 612, 616,
				619, 623, 626, 629, 633, 636, 640, 643, 647, 650, 653, 657,
				660, 664, 667, 671, 674, 677, 681, 684, 688, 691, 695, 698,
				702, 705, 708, 712, 715, 719, 722, 726, 729, 733, 736, 740,
				743, 746, 750, 753, 757, 760, 764, 767, 771, 774, 778, 781,
				785, 788, 792, 795, 799, 802, 806, 809, 813, 816, 820, 823,
				827, 830, 834, 837, 841, 844, 848, 852, 855, 859, 862, 866,
				869, 873, 876, 880, 883, 887, 891, 894, 898, 901, 905, 908, 912
        };
 
        
    	/**************************************************
    	 * 			LG55'E83
    	 ***************************************************/
        int LG55E83_R[] = {
        		0, 19, 19, 27, 29, 33, 35, 38, 40, 42, 45, 47, 50,
				54, 57, 60, 64, 68, 71, 74, 77, 81, 84, 88, 92, 97, 101, 105,
				109, 114, 118, 123, 127, 132, 137, 142, 146, 150, 154, 159,
				163, 168, 172, 177, 181, 186, 191, 195, 200, 205, 209, 214,
				219, 223, 228, 234, 239, 244, 249, 253, 258, 263, 267, 271,
				275, 280, 284, 289, 293, 297, 301, 305, 309, 314, 318, 323,
				328, 332, 337, 341, 346, 351, 355, 360, 364, 369, 373, 377,
				381, 385, 389, 393, 397, 401, 405, 409, 413, 418, 422, 426,
				430, 434, 438, 443, 447, 451, 455, 459, 464, 468, 472, 476,
				480, 484, 488, 492, 496, 500, 504, 507, 511, 515, 519, 523,
				528, 532, 537, 541, 546, 550, 554, 558, 562, 566, 569, 572,
				575, 579, 583, 587, 591, 596, 600, 605, 609, 613, 617, 621,
				625, 629, 632, 635, 637, 641, 645, 648, 652, 656, 660, 664,
				669, 673, 677, 682, 686, 691, 695, 700, 705, 709, 713, 716,
				720, 724, 727, 731, 734, 738, 741, 744, 747, 751, 754, 757,
				761, 764, 768, 772, 776, 780, 784, 789, 794, 798, 802, 807,
				811, 814, 818, 821, 824, 827, 831, 835, 838, 842, 845, 849,
				853, 856, 860, 864, 867, 871, 874, 878, 882, 885, 889, 893,
				896, 900, 903, 907, 910, 914, 918, 922, 926, 930, 934, 938,
				942, 947, 951, 955, 960, 964, 968, 972, 976, 980, 984, 987,
				991, 994, 997, 1000, 1003, 1006, 1009, 1011, 1014, 1016, 1018,
				1020
				};
        int LG55E83_G[] = {
        		0, 21, 21, 31, 33, 36, 38, 40, 43, 47, 50, 53, 55,
				59, 62, 65, 68, 72, 75, 79, 83, 87, 91, 94, 98, 102, 107, 111,
				115, 120, 124, 129, 133, 138, 142, 146, 149, 153, 157, 161,
				165, 169, 173, 177, 181, 185, 189, 193, 197, 200, 204, 208,
				212, 216, 220, 224, 228, 232, 236, 239, 243, 247, 251, 255,
				259, 263, 266, 270, 274, 278, 282, 286, 289, 293, 297, 301,
				305, 309, 312, 316, 320, 324, 328, 332, 335, 339, 343, 347,
				351, 354, 358, 362, 366, 370, 373, 377, 381, 385, 389, 392,
				396, 400, 404, 407, 411, 415, 419, 423, 426, 430, 434, 438,
				441, 445, 449, 453, 456, 460, 464, 468, 471, 475, 479, 483,
				486, 490, 494, 498, 501, 505, 509, 513, 516, 520, 524, 528,
				531, 535, 539, 542, 546, 550, 554, 557, 561, 565, 568, 572,
				576, 580, 583, 587, 591, 594, 598, 602, 606, 609, 613, 617,
				620, 624, 628, 631, 635, 639, 643, 646, 650, 654, 657, 661,
				665, 668, 672, 676, 679, 683, 687, 691, 694, 698, 702, 705,
				709, 713, 716, 720, 724, 727, 731, 735, 738, 742, 746, 749,
				753, 757, 760, 764, 768, 771, 775, 779, 782, 786, 790, 793,
				797, 801, 804, 808, 812, 815, 819, 823, 826, 830, 833, 837,
				841, 844, 848, 852, 855, 859, 863, 866, 870, 874, 877, 881,
				884, 888, 892, 895, 899, 903, 906, 910, 914, 917, 921, 924,
				928, 932, 935, 939, 943, 946, 950, 954, 957, 961, 964, 968
				};
        int LG55E83_B[] = {
        		0, 18, 18, 30, 34, 38, 41, 44, 47, 49, 51, 53, 55,
				57, 59, 61, 64, 67, 70, 74, 77, 81, 85, 89, 93, 97, 101, 105,
				109, 113, 118, 122, 126, 131, 135, 139, 143, 147, 151, 156,
				160, 164, 168, 172, 175, 179, 183, 187, 192, 196, 200, 204,
				208, 213, 217, 221, 225, 229, 233, 237, 241, 245, 248, 252,
				256, 260, 264, 267, 271, 275, 280, 284, 288, 292, 296, 300,
				304, 308, 312, 315, 319, 322, 326, 330, 334, 338, 343, 348,
				352, 357, 362, 366, 370, 374, 378, 381, 385, 388, 392, 395,
				399, 402, 406, 410, 413, 417, 421, 425, 428, 432, 436, 440,
				444, 448, 452, 456, 460, 464, 467, 471, 475, 478, 482, 486,
				490, 494, 498, 502, 505, 509, 513, 517, 521, 525, 528, 532,
				535, 539, 542, 546, 550, 554, 557, 561, 565, 568, 572, 576,
				579, 583, 587, 590, 594, 597, 601, 605, 608, 612, 616, 619,
				623, 627, 631, 635, 638, 642, 646, 650, 653, 657, 661, 665,
				669, 673, 677, 681, 685, 689, 693, 697, 701, 705, 709, 713,
				717, 721, 725, 729, 734, 738, 741, 745, 749, 753, 757, 761,
				765, 769, 773, 777, 780, 784, 788, 791, 795, 799, 803, 807,
				811, 815, 818, 822, 826, 830, 834, 838, 841, 845, 849, 853,
				857, 860, 864, 868, 872, 876, 879, 883, 887, 891, 895, 899,
				903, 907, 911, 915, 919, 924, 928, 932, 937, 942, 946, 950,
				954, 958, 962, 966, 970, 974, 979, 983, 987, 992, 996, 1000
			};
        
    	/**************************************************
    	 * 			LG42'E85
    	 ***************************************************/
//        int LG42E85_R[] = {
//            0, 4, 8, 12, 16, 20, 24, 28, 32, 38, 42, 46, 49, 52, 56, 60, 63,
//            67, 71, 75, 79, 83, 87, 91, 95, 99, 103, 108, 112, 116, 121, 126,
//            130, 135, 140, 144, 148, 153, 157, 161, 165, 169, 173, 178, 182,
//            186, 190, 194, 198, 203, 207, 211, 215, 219, 223, 228, 232, 236,
//            240, 244, 248, 253, 257, 261, 265, 269, 273, 278, 282, 286, 290,
//            294, 298, 303, 307, 311, 315, 319, 323, 327, 332, 336, 340, 344,
//            348, 352, 357, 361, 365, 369, 373, 377, 381, 385, 390, 394, 398,
//            402, 406, 410, 414, 418, 423, 427, 431, 435, 439, 443, 447, 451,
//            455, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 505,
//            509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553, 557,
//            561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606, 610,
//            614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662,
//            665, 669, 673, 677, 681, 685, 689, 693, 697, 701, 705, 709, 713,
//            717, 721, 725, 729, 733, 736, 740, 744, 748, 752, 756, 760, 764,
//            768, 772, 775, 779, 783, 787, 791, 795, 799, 802, 806, 810, 814,
//            818, 822, 826, 829, 833, 837, 841, 845, 849, 852, 856, 860, 864,
//            868, 871, 875, 879, 883, 886, 890, 894, 898, 902, 905, 909, 913,
//            917, 920, 924, 928, 932, 935, 939, 943, 946, 950, 954, 958, 961,
//            965, 969, 972, 976, 980, 983, 987, 991, 994, 998, 1002, 1005, 1009,
//            1013, 1016, 1020,
//		};
//        int LG42E85_G[] = {
//            0, 3, 7, 11, 14, 18, 21, 25, 29, 33, 37, 40, 43, 45, 49, 52, 56,
//            60, 63, 67, 70, 74, 77, 81, 84, 88, 92, 96, 100, 104, 107, 111,
//            115, 119, 123, 126, 130, 134, 138, 141, 145, 149, 152, 156, 160,
//            163, 167, 171, 174, 178, 182, 185, 189, 193, 196, 200, 204, 207,
//            211, 215, 218, 222, 226, 229, 233, 237, 240, 244, 248, 251, 255,
//            258, 262, 266, 269, 273, 277, 280, 284, 288, 291, 295, 299, 302,
//            306, 310, 313, 317, 320, 324, 328, 331, 335, 339, 342, 346, 350,
//            353, 357, 360, 364, 368, 371, 375, 378, 382, 386, 389, 393, 396,
//            400, 404, 407, 411, 414, 418, 422, 425, 429, 432, 436, 440, 443,
//            447, 450, 454, 457, 461, 465, 468, 472, 475, 479, 482, 486, 490,
//            493, 497, 500, 504, 507, 511, 514, 518, 521, 525, 528, 532, 536,
//            539, 543, 546, 550, 553, 557, 560, 564, 567, 571, 574, 578, 581,
//            585, 588, 592, 595, 599, 602, 605, 609, 612, 616, 619, 623, 626,
//            630, 633, 637, 640, 643, 647, 650, 654, 657, 661, 664, 667, 671,
//            674, 678, 681, 685, 688, 691, 695, 698, 702, 705, 708, 712, 715,
//            718, 722, 725, 729, 732, 735, 739, 742, 745, 749, 752, 755, 759,
//            762, 765, 769, 772, 775, 779, 782, 785, 789, 792, 795, 799, 802,
//            805, 808, 812, 815, 818, 822, 825, 828, 831, 835, 838, 841, 844,
//            848, 851, 854, 857, 861, 864, 867, 870, 874, 877, 880, 883, 886,
//            890, 893, 896,
//		};
//        int LG42E85_B[] = {
//            0, 0, 0, 11, 15, 21, 25, 29, 32, 37, 41, 43, 46, 49, 52, 54, 57,
//            61, 64, 68, 71, 75, 79, 83, 87, 91, 95, 99, 102, 106, 110, 115,
//            119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 159, 162, 165,
//            169, 173, 177, 180, 184, 188, 192, 196, 199, 203, 207, 211, 215,
//            218, 222, 226, 229, 233, 237, 241, 244, 248, 252, 256, 260, 264,
//            268, 271, 275, 279, 283, 287, 291, 294, 298, 302, 306, 309, 313,
//            317, 321, 324, 328, 332, 336, 339, 343, 347, 351, 354, 358, 362,
//            366, 369, 373, 377, 381, 384, 388, 392, 396, 399, 403, 407, 411,
//            414, 418, 422, 426, 429, 433, 437, 440, 444, 448, 452, 455, 459,
//            463, 466, 470, 474, 478, 481, 485, 489, 492, 496, 500, 503, 507,
//            511, 514, 518, 522, 525, 529, 533, 536, 540, 544, 547, 551, 555,
//            558, 562, 566, 569, 573, 576, 580, 584, 587, 591, 595, 598, 602,
//            605, 609, 613, 616, 620, 623, 627, 631, 634, 638, 641, 645, 649,
//            652, 656, 659, 663, 666, 670, 674, 677, 681, 684, 688, 691, 695,
//            698, 702, 705, 709, 713, 716, 720, 723, 727, 730, 734, 737, 741,
//            744, 748, 751, 755, 758, 762, 765, 769, 772, 775, 779, 782, 786,
//            789, 793, 796, 800, 803, 807, 810, 813, 817, 820, 824, 827, 831,
//            834, 837, 841, 844, 848, 851, 854, 858, 861, 864, 868, 871, 875,
//            878, 881, 885, 888, 891, 895, 898, 901, 905, 908, 911, 915, 918,
//            921, 925, 928,
//				};

    	/**************************************************
    	 * 			LG47'E85
    	 ***************************************************/
//        int LG47E85_R[] = {
//                0, 4, 8, 12, 16, 20, 24, 28, 32, 38, 42, 46, 49, 52, 56, 60, 63,
//                67, 71, 75, 79, 83, 87, 91, 95, 99, 103, 108, 112, 116, 121, 126,
//                130, 135, 140, 144, 148, 153, 157, 161, 165, 169, 173, 178, 182,
//                186, 190, 194, 198, 203, 207, 211, 215, 219, 223, 228, 232, 236,
//                240, 244, 248, 253, 257, 261, 265, 269, 273, 278, 282, 286, 290,
//                294, 298, 303, 307, 311, 315, 319, 323, 327, 332, 336, 340, 344,
//                348, 352, 357, 361, 365, 369, 373, 377, 381, 385, 390, 394, 398,
//                402, 406, 410, 414, 418, 423, 427, 431, 435, 439, 443, 447, 451,
//                455, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 505,
//                509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553, 557,
//                561, 565, 569, 573, 577, 582, 586, 590, 594, 598, 602, 606, 610,
//                614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662,
//                665, 669, 673, 677, 681, 685, 689, 693, 697, 701, 705, 709, 713,
//                717, 721, 725, 729, 733, 736, 740, 744, 748, 752, 756, 760, 764,
//                768, 772, 775, 779, 783, 787, 791, 795, 799, 802, 806, 810, 814,
//                818, 822, 826, 829, 833, 837, 841, 845, 849, 852, 856, 860, 864,
//                868, 871, 875, 879, 883, 886, 890, 894, 898, 902, 905, 909, 913,
//                917, 920, 924, 928, 932, 935, 939, 943, 946, 950, 954, 958, 961,
//                965, 969, 972, 976, 980, 983, 987, 991, 994, 998, 1002, 1005, 1009,
//                1013, 1016, 1020,
//        };
//            int LG47E85_G[] = {
//                0, 3, 7, 11, 14, 18, 21, 25, 29, 33, 37, 40, 43, 45, 49, 52, 56,
//                60, 63, 67, 70, 74, 77, 81, 84, 88, 92, 96, 100, 104, 107, 111,
//                115, 119, 123, 126, 130, 134, 138, 141, 145, 149, 152, 156, 160,
//                163, 167, 171, 174, 178, 182, 185, 189, 193, 196, 200, 204, 207,
//                211, 215, 218, 222, 226, 229, 233, 237, 240, 244, 248, 251, 255,
//                258, 262, 266, 269, 273, 277, 280, 284, 288, 291, 295, 299, 302,
//                306, 310, 313, 317, 320, 324, 328, 331, 335, 339, 342, 346, 350,
//                353, 357, 360, 364, 368, 371, 375, 378, 382, 386, 389, 393, 396,
//                400, 404, 407, 411, 414, 418, 422, 425, 429, 432, 436, 440, 443,
//                447, 450, 454, 457, 461, 465, 468, 472, 475, 479, 482, 486, 490,
//                493, 497, 500, 504, 507, 511, 514, 518, 521, 525, 528, 532, 536,
//                539, 543, 546, 550, 553, 557, 560, 564, 567, 571, 574, 578, 581,
//                585, 588, 592, 595, 599, 602, 605, 609, 612, 616, 619, 623, 626,
//                630, 633, 637, 640, 643, 647, 650, 654, 657, 661, 664, 667, 671,
//                674, 678, 681, 685, 688, 691, 695, 698, 702, 705, 708, 712, 715,
//                718, 722, 725, 729, 732, 735, 739, 742, 745, 749, 752, 755, 759,
//                762, 765, 769, 772, 775, 779, 782, 785, 789, 792, 795, 799, 802,
//                805, 808, 812, 815, 818, 822, 825, 828, 831, 835, 838, 841, 844,
//                848, 851, 854, 857, 861, 864, 867, 870, 874, 877, 880, 883, 886,
//                890, 893, 896,
//        };
//            int LG47E85_B[] = {
//                0, 0, 0, 11, 15, 21, 25, 29, 32, 37, 41, 43, 46, 49, 52, 54, 57,
//                61, 64, 68, 71, 75, 79, 83, 87, 91, 95, 99, 102, 106, 110, 115,
//                119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 159, 162, 165,
//                169, 173, 177, 180, 184, 188, 192, 196, 199, 203, 207, 211, 215,
//                218, 222, 226, 229, 233, 237, 241, 244, 248, 252, 256, 260, 264,
//                268, 271, 275, 279, 283, 287, 291, 294, 298, 302, 306, 309, 313,
//                317, 321, 324, 328, 332, 336, 339, 343, 347, 351, 354, 358, 362,
//                366, 369, 373, 377, 381, 384, 388, 392, 396, 399, 403, 407, 411,
//                414, 418, 422, 426, 429, 433, 437, 440, 444, 448, 452, 455, 459,
//                463, 466, 470, 474, 478, 481, 485, 489, 492, 496, 500, 503, 507,
//                511, 514, 518, 522, 525, 529, 533, 536, 540, 544, 547, 551, 555,
//                558, 562, 566, 569, 573, 576, 580, 584, 587, 591, 595, 598, 602,
//                605, 609, 613, 616, 620, 623, 627, 631, 634, 638, 641, 645, 649,
//                652, 656, 659, 663, 666, 670, 674, 677, 681, 684, 688, 691, 695,
//                698, 702, 705, 709, 713, 716, 720, 723, 727, 730, 734, 737, 741,
//                744, 748, 751, 755, 758, 762, 765, 769, 772, 775, 779, 782, 786,
//                789, 793, 796, 800, 803, 807, 810, 813, 817, 820, 824, 827, 831,
//                834, 837, 841, 844, 848, 851, 854, 858, 861, 864, 868, 871, 875,
//                878, 881, 885, 888, 891, 895, 898, 901, 905, 908, 911, 915, 918,
//                921, 925, 928,
//        };
	}

//    class Warm {
//        int Panel0_R[] = {
//            0, 1, 4, 8, 12, 17, 23, 28, 34, 39, 43, 48, 52, 56, 60, 64, 68, 72,
//            76, 80, 84, 90, 96, 102, 107, 111, 115, 118, 121, 125, 129, 133,
//            137, 140, 143, 146, 149, 155, 160, 164, 169, 174, 178, 183, 188,
//            194, 199, 204, 209, 214, 218, 222, 225, 228, 232, 236, 241, 245,
//            249, 254, 258, 262, 267, 271, 275, 280, 283, 287, 290, 294, 298,
//            302, 306, 310, 314, 319, 323, 328, 332, 336, 340, 344, 349, 353,
//            357, 362, 366, 370, 374, 378, 383, 388, 393, 398, 402, 407, 412,
//            416, 420, 425, 429, 434, 439, 443, 448, 453, 457, 461, 465, 470,
//            474, 478, 483, 486, 490, 495, 500, 505, 510, 515, 520, 525, 530,
//            535, 540, 544, 549, 553, 557, 560, 564, 567, 571, 573, 576, 579,
//            582, 585, 588, 592, 596, 599, 603, 607, 611, 615, 618, 622, 626,
//            630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 673, 677,
//            681, 685, 689, 693, 697, 701, 705, 708, 712, 716, 720, 723, 727,
//            731, 735, 738, 742, 746, 749, 753, 756, 760, 763, 768, 772, 776,
//            780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823, 827,
//            831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870, 874,
//            877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917, 920,
//            924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968, 972,
//            976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009, 1012,
//            1014, 1016, 1018, 1020
//        };
//        int Panel0_G[] = {
//            0, 1, 3, 7, 11, 16, 20, 24, 29, 34, 38, 42, 46, 51, 56, 61, 66, 71,
//            76, 81, 84, 88, 91, 95, 99, 102, 106, 109, 113, 116, 120, 123, 127,
//            131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179,
//            184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 227, 231,
//            234, 237, 240, 244, 248, 252, 256, 260, 264, 267, 271, 275, 279,
//            283, 287, 290, 294, 298, 302, 305, 309, 313, 317, 321, 324, 328,
//            332, 336, 339, 343, 347, 351, 354, 358, 362, 366, 369, 373, 377,
//            381, 385, 388, 392, 396, 400, 403, 407, 411, 415, 419, 423, 427,
//            432, 437, 442, 446, 451, 455, 458, 462, 467, 472, 477, 482, 487,
//            492, 496, 500, 504, 507, 508, 510, 513, 516, 519, 522, 524, 527,
//            530, 533, 536, 539, 542, 545, 548, 551, 554, 557, 560, 564, 567,
//            571, 574, 578, 582, 586, 590, 594, 598, 601, 605, 608, 611, 615,
//            619, 622, 625, 629, 632, 636, 639, 643, 646, 650, 653, 657, 660,
//            664, 667, 671, 674, 678, 681, 684, 688, 691, 695, 698, 702, 705,
//            708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 741, 745, 748,
//            751, 754, 757, 760, 763, 767, 771, 774, 778, 782, 785, 789, 792,
//            796, 799, 803, 806, 810, 813, 816, 820, 823, 826, 830, 833, 836,
//            839, 842, 846, 849, 852, 855, 858, 861, 864, 867, 870, 873, 876,
//            879, 882, 885, 888, 891, 894, 898, 901, 904, 908, 911, 914, 917,
//            921, 924
//        };
//        int Panel0_B[] = {
//            0, 1, 2, 4, 6, 9, 12, 16, 21, 26, 31, 36, 40, 44, 47, 50, 53, 56,
//            59, 63, 67, 71, 77, 83, 87, 91, 95, 99, 102, 105, 109, 112, 116,
//            119, 122, 125, 129, 134, 138, 142, 147, 152, 156, 160, 164, 168,
//            172, 176, 180, 184, 188, 192, 194, 198, 202, 206, 209, 213, 217,
//            222, 226, 229, 233, 237, 241, 245, 248, 252, 256, 259, 263, 267,
//            271, 274, 278, 282, 286, 290, 294, 298, 302, 306, 310, 314, 317,
//            321, 325, 329, 332, 336, 339, 343, 347, 350, 354, 358, 362, 366,
//            369, 373, 377, 380, 384, 387, 391, 395, 399, 403, 408, 412, 418,
//            423, 429, 434, 439, 442, 445, 449, 453, 456, 460, 463, 466, 470,
//            474, 478, 482, 487, 492, 497, 502, 507, 512, 516, 519, 523, 525,
//            528, 531, 535, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567,
//            570, 572, 575, 578, 581, 585, 589, 592, 596, 599, 603, 606, 610,
//            613, 617, 620, 623, 627, 630, 634, 637, 641, 644, 648, 651, 655,
//            658, 662, 665, 669, 672, 675, 679, 682, 686, 689, 692, 696, 699,
//            703, 706, 709, 712, 716, 719, 722, 726, 729, 732, 735, 739, 742,
//            745, 748, 751, 754, 758, 761, 764, 767, 771, 775, 778, 782, 785,
//            789, 792, 796, 799, 803, 806, 810, 813, 816, 819, 823, 826, 829,
//            832, 836, 839, 842, 845, 848, 851, 854, 857, 861, 863, 866, 869,
//            872, 876, 878, 881, 884, 887, 890, 893, 897, 900, 903, 906, 910,
//            913, 916
//        };
//        int Panel1_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel1_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel1_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//        int Panel2_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel2_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel2_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//        int Panel3_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel3_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel3_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//    }
//
//    class Cold {
//        int Panel0_R[] = {
//            0, 1, 4, 8, 12, 17, 23, 28, 34, 39, 43, 48, 52, 56, 60, 64, 68, 72,
//            76, 80, 84, 90, 96, 102, 107, 111, 115, 118, 121, 125, 129, 133,
//            137, 140, 143, 146, 149, 155, 160, 164, 169, 174, 178, 183, 188,
//            194, 199, 204, 209, 214, 218, 222, 225, 228, 232, 236, 241, 245,
//            249, 254, 258, 262, 267, 271, 275, 280, 283, 287, 290, 294, 298,
//            302, 306, 310, 314, 319, 323, 328, 332, 336, 340, 344, 349, 353,
//            357, 362, 366, 370, 374, 378, 383, 388, 393, 398, 402, 407, 412,
//            416, 420, 425, 429, 434, 439, 443, 448, 453, 457, 461, 465, 470,
//            474, 478, 483, 486, 490, 495, 500, 505, 510, 515, 520, 525, 530,
//            535, 540, 544, 549, 553, 557, 560, 564, 567, 571, 573, 576, 579,
//            582, 585, 588, 592, 596, 599, 603, 607, 611, 615, 618, 622, 626,
//            630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 673, 677,
//            681, 685, 689, 693, 697, 701, 705, 708, 712, 716, 720, 723, 727,
//            731, 735, 738, 742, 746, 749, 753, 756, 760, 763, 768, 772, 776,
//            780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823, 827,
//            831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870, 874,
//            877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917, 920,
//            924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968, 972,
//            976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009, 1012,
//            1014, 1016, 1018, 1020
//        };
//        int Panel0_G[] = {
//            0, 1, 3, 7, 11, 16, 20, 24, 29, 34, 38, 42, 46, 51, 56, 61, 66, 71,
//            76, 81, 84, 88, 91, 95, 99, 102, 106, 109, 113, 116, 120, 123, 127,
//            131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179,
//            184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 227, 231,
//            234, 237, 240, 244, 248, 252, 256, 260, 264, 267, 271, 275, 279,
//            283, 287, 290, 294, 298, 302, 305, 309, 313, 317, 321, 324, 328,
//            332, 336, 339, 343, 347, 351, 354, 358, 362, 366, 369, 373, 377,
//            381, 385, 388, 392, 396, 400, 403, 407, 411, 415, 419, 423, 427,
//            432, 437, 442, 446, 451, 455, 458, 462, 467, 472, 477, 482, 487,
//            492, 496, 500, 504, 507, 508, 510, 513, 516, 519, 522, 524, 527,
//            530, 533, 536, 539, 542, 545, 548, 551, 554, 557, 560, 564, 567,
//            571, 574, 578, 582, 586, 590, 594, 598, 601, 605, 608, 611, 615,
//            619, 622, 625, 629, 632, 636, 639, 643, 646, 650, 653, 657, 660,
//            664, 667, 671, 674, 678, 681, 684, 688, 691, 695, 698, 702, 705,
//            708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 741, 745, 748,
//            751, 754, 757, 760, 763, 767, 771, 774, 778, 782, 785, 789, 792,
//            796, 799, 803, 806, 810, 813, 816, 820, 823, 826, 830, 833, 836,
//            839, 842, 846, 849, 852, 855, 858, 861, 864, 867, 870, 873, 876,
//            879, 882, 885, 888, 891, 894, 898, 901, 904, 908, 911, 914, 917,
//            921, 924
//        };
//        int Panel0_B[] = {
//            0, 1, 3, 4, 7, 10, 14, 18, 23, 29, 35, 39, 44, 48, 51, 55, 58, 62,
//            65, 68, 72, 78, 84, 90, 94, 99, 103, 107, 110, 114, 117, 121, 125,
//            129, 133, 137, 142, 146, 151, 156, 161, 166, 171, 175, 179, 184,
//            188, 193, 197, 201, 206, 209, 212, 216, 220, 225, 228, 233, 237,
//            242, 246, 250, 255, 259, 263, 267, 271, 275, 279, 283, 287, 291,
//            296, 300, 304, 308, 312, 316, 320, 325, 329, 333, 338, 342, 347,
//            351, 355, 359, 362, 366, 370, 374, 378, 382, 387, 391, 395, 399,
//            404, 407, 411, 415, 419, 423, 427, 431, 436, 441, 446, 451, 457,
//            463, 470, 475, 480, 484, 487, 492, 496, 500, 504, 507, 511, 514,
//            518, 522, 527, 531, 536, 541, 546, 551, 556, 561, 565, 568, 571,
//            575, 578, 582, 587, 591, 595, 598, 602, 605, 608, 612, 615, 618,
//            621, 624, 627, 630, 634, 638, 642, 646, 650, 654, 657, 661, 665,
//            669, 673, 676, 680, 684, 688, 692, 695, 699, 703, 707, 710, 714,
//            718, 721, 725, 729, 732, 736, 739, 743, 746, 750, 753, 757, 760,
//            764, 768, 772, 776, 780, 784, 788, 792, 796, 800, 803, 807, 811,
//            815, 818, 822, 826, 829, 833, 836, 840, 843, 847, 850, 854, 857,
//            861, 864, 867, 871, 874, 878, 881, 884, 887, 891, 894, 898, 902,
//            905, 909, 913, 916, 920, 924, 927, 931, 934, 938, 942, 945, 950,
//            954, 957, 961, 965, 969, 973, 977, 980, 984, 988, 992, 995, 998,
//            1001, 1004
//        };
//        int Panel1_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel1_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel1_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//        int Panel2_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel2_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel2_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//        int Panel3_R[] = {
//            0, 4, 10, 16, 21, 26, 30, 34, 39, 43, 47, 51, 56, 60, 65, 70, 75,
//            80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 119, 123, 128, 132,
//            137, 141, 146, 150, 155, 159, 164, 168, 172, 177, 181, 185, 189,
//            194, 198, 202, 206, 211, 215, 219, 224, 228, 232, 236, 240, 244,
//            248, 252, 256, 260, 265, 269, 273, 277, 281, 285, 289, 293, 298,
//            302, 306, 310, 314, 319, 323, 327, 331, 335, 340, 344, 348, 352,
//            357, 361, 365, 370, 374, 378, 383, 387, 391, 396, 400, 404, 409,
//            413, 417, 422, 426, 430, 435, 439, 443, 448, 452, 456, 461, 465,
//            470, 474, 478, 483, 487, 491, 496, 500, 504, 509, 513, 516, 520,
//            524, 528, 532, 536, 540, 544, 547, 551, 555, 559, 563, 567, 571,
//            575, 579, 583, 587, 591, 594, 598, 602, 606, 610, 614, 618, 622,
//            626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 672,
//            676, 680, 684, 688, 692, 696, 700, 704, 707, 711, 715, 719, 723,
//            727, 731, 735, 738, 742, 746, 749, 753, 757, 760, 764, 768, 772,
//            776, 781, 785, 788, 792, 796, 800, 804, 808, 812, 816, 819, 823,
//            827, 831, 834, 838, 842, 845, 849, 852, 856, 860, 863, 866, 870,
//            874, 877, 880, 884, 887, 891, 894, 898, 902, 906, 909, 913, 917,
//            920, 924, 928, 932, 935, 939, 943, 947, 951, 956, 959, 963, 968,
//            972, 976, 979, 983, 987, 991, 995, 998, 1001, 1004, 1007, 1009,
//            1012, 1014, 1016, 1018, 1020
//        };
//        int Panel3_G[] = {
//            0, 6, 10, 14, 18, 22, 25, 29, 33, 37, 40, 44, 49, 53, 57, 61, 65,
//            69, 73, 77, 81, 85, 88, 92, 95, 99, 102, 106, 109, 112, 115, 119,
//            122, 126, 129, 133, 137, 141, 145, 149, 153, 157, 160, 164, 168,
//            172, 176, 179, 183, 187, 191, 194, 198, 202, 206, 209, 213, 216,
//            220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 260, 264,
//            268, 272, 276, 280, 283, 287, 290, 294, 297, 301, 305, 308, 312,
//            316, 319, 323, 326, 330, 334, 337, 341, 345, 348, 352, 355, 359,
//            362, 366, 370, 373, 377, 380, 384, 388, 391, 395, 399, 402, 406,
//            409, 413, 417, 420, 424, 427, 431, 434, 438, 441, 445, 449, 452,
//            456, 460, 464, 467, 471, 475, 479, 483, 486, 490, 494, 497, 501,
//            505, 509, 512, 515, 518, 522, 525, 528, 531, 534, 537, 540, 544,
//            547, 550, 553, 556, 560, 563, 566, 569, 573, 576, 579, 582, 586,
//            589, 592, 596, 599, 603, 606, 610, 613, 617, 620, 623, 626, 630,
//            633, 637, 640, 644, 647, 650, 654, 657, 661, 664, 668, 671, 674,
//            678, 681, 685, 688, 691, 695, 698, 701, 705, 708, 711, 714, 717,
//            721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757,
//            760, 763, 767, 770, 774, 777, 781, 784, 787, 791, 794, 798, 801,
//            804, 807, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 842,
//            845, 848, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 879,
//            882, 885, 888,
//        };
//        int Panel3_B[] = {
//            0, 4, 8, 13, 18, 23, 27, 31, 35, 38, 41, 44, 48, 52, 56, 60, 65,
//            70, 74, 78, 82, 86, 90, 94, 98, 101, 104, 108, 112, 116, 119, 123,
//            127, 131, 135, 140, 144, 148, 152, 156, 160, 164, 167, 171, 175,
//            179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 224,
//            228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276,
//            280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328,
//            331, 335, 339, 343, 346, 350, 353, 357, 360, 364, 367, 370, 374,
//            377, 381, 384, 388, 391, 395, 398, 402, 405, 409, 413, 417, 420,
//            424, 428, 432, 435, 439, 442, 446, 450, 453, 457, 461, 464, 468,
//            472, 475, 479, 483, 486, 490, 494, 498, 501, 505, 509, 512, 515,
//            519, 522, 525, 529, 532, 536, 539, 542, 546, 549, 553, 556, 560,
//            563, 566, 570, 573, 577, 580, 584, 587, 591, 594, 598, 601, 605,
//            608, 612, 615, 619, 622, 625, 629, 632, 636, 639, 643, 646, 650,
//            653, 656, 660, 663, 667, 671, 674, 678, 681, 685, 688, 692, 696,
//            699, 703, 706, 710, 713, 717, 720, 724, 727, 731, 734, 738, 741,
//            745, 748, 751, 754, 757, 761, 764, 767, 771, 775, 779, 783, 786,
//            790, 794, 797, 801, 804, 807, 811, 814, 817, 820, 823, 826, 830,
//            833, 836, 839, 842, 845, 849, 852, 855, 858, 861, 864, 867, 870,
//            873, 876, 879, 882, 885, 888, 891, 894, 897, 901, 904, 907, 910,
//            914, 917, 920
//        };
//    }
}
